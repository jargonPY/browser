2023-05-28 09:08:12.913 | DEBUG    | browser_html.html_parser:parse:45 - 
< html attributes={'lang': 'en-US', 'xml:lang': 'en-US'} style={} >
  < head attributes={} style={} >
    < meta attributes={'charset': 'utf-8', '/': ''} style={} >
    < meta attributes={'name': 'color-scheme', 'content': 'dar', 'light"': ''} style={} >
    < meta attributes={'name': 'generator', 'content': 'pandoc', '/': ''} style={} >
    < meta attributes={'name': 'viewport', 'content': 'width=device-width,initial-scale=1.0,user-scalable=yes', '/': ''} style={} >
    < link attributes={'rel': 'prev', 'href': 'graphics.html', '/': ''} style={} >
    < link attributes={'rel': 'next', 'href': 'html.html', '/': ''} style={} >
    < link attributes={'rel': 'stylesheet', 'href': 'book.css', '/': ''} style={} >
    < link attributes={'rel': 'stylesheet', 'href': 'https://fonts.googleapis.com/css?family=Vollkorn%7CLora&display=swap', '/': ''} style={} >
    < link attributes={'rel': 'stylesheet', 'href': 'https://fonts.googleapis.com/css?family=Vollkorn:400i%7CLora:400i&display=swap', '/': ''} style={} >
    < link attributes={'rel': 'alternate', 'type': 'application/rss+xml', 'href': 'rss.xml', 'title': 'We', 'browser': '', 'engineering"': ''} style={} >
    < title attributes={} style={} >
      'Formatting Text | Web Browser Engineering'
  < body attributes={} style={} >
    < header attributes={} style={} >
      < h1 attributes={'class': 'title'} style={} >
        'Formatting Text'
      < a attributes={'href': 'https://twitter.com/browserbook'} style={} >
        'Twitter'
      ' ·\n'
      < a attributes={'href': 'https://browserbook.substack.com/'} style={} >
        'Blog'
      ' ·\n'
      < a attributes={'href': 'https://patreon.com/browserengineering'} style={} >
        'Patreon'
      ' ·\n'
      < a attributes={'href': 'https://github.com/browserengineering/book/discussions'} style={} >
        'Discussions'
    < nav attributes={'class': 'links'} style={} >
      '\n  Chapter 3 of '
      < a attributes={'href': 'index.html', 'title': 'Tabl', 'of': '', 'contents"': ''} style={} >
        'Web Browser Engineering'
      '.\n  '
      < a attributes={'rel': 'prev', 'title': 'Previou', 'chapter"': '', 'href': 'graphics.html'} style={} >
        '<'
      < a attributes={'rel': 'next', 'title': 'Nex', 'chapter"': '', 'href': 'html.html'} style={} >
        '>'
    < nav attributes={'id': 'toc'} style={} >
      < ul attributes={} style={} >
        < li attributes={} style={} >
          < a attributes={'href': '#what-is-a-font', 'id': 'toc-what-is-a-font'} style={} >
            'What is a\nfont?'
        < li attributes={} style={} >
          < a attributes={'href': '#measuring-text', 'id': 'toc-measuring-text'} style={} >
            'Measuring\ntext'
        < li attributes={} style={} >
          < a attributes={'href': '#word-by-word', 'id': 'toc-word-by-word'} style={} >
            'Word by word'
        < li attributes={} style={} >
          < a attributes={'href': '#styling-text', 'id': 'toc-styling-text'} style={} >
            'Styling text'
        < li attributes={} style={} >
          < a attributes={'href': '#a-layout-object', 'id': 'toc-a-layout-object'} style={} >
            'A layout\nobject'
        < li attributes={} style={} >
          < a attributes={'href': '#text-of-different-sizes', 'id': 'toc-text-of-different-sizes'} style={} >
            'Text of different sizes'
        < li attributes={} style={} >
          < a attributes={'href': '#faster-text-layout', 'id': 'toc-faster-text-layout'} style={} >
            'Faster\ntext layout'
        < li attributes={} style={} >
          < a attributes={'href': '#summary', 'id': 'toc-summary'} style={} >
            'Summary'
        < li attributes={} style={} >
          < a attributes={'href': '#outline', 'id': 'toc-outline'} style={} >
            'Outline'
        < li attributes={} style={} >
          < a attributes={'href': '#exercises', 'id': 'toc-exercises'} style={} >
            'Exercises'
    < p attributes={} style={} >
      'In the last chapter, your web browser created a graphical window and\ndrew a grid of characters to it. That’s OK for Chinese, but English text\nfeatures characters of different widths and words that you can’t break\nacross lines.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'There are\nlots of languages in the world, and lots of typographic conventions. A\nreal web browser supports every language from Arabic to Zulu, but this\nbook focuses on English. Text is near-infinitely complex, but this book\ncannot be infinitely long!'
      ' In this chapter, we’ll add\nthose capabilities. You’ll be able to read this page in your\nbrowser!'
    < h1 attributes={'id': 'what-is-a-font'} style={} >
      'What is a font?'
    < p attributes={} style={} >
      'So far, we’ve called '
      < code attributes={} style={} >
        'create_text'
      ' with a character and\ntwo coordinates to write text to the screen. But we never specified the\nfont, the size, or the color. To talk about those things, we need to\ncreate and use font objects.'
    < p attributes={} style={} >
      'What is a '
      < em attributes={} style={} >
        'font'
      ', exactly? Well, in the olden days, printers\narranged little metal slugs on rails, covered them with ink, and pressed\nthem to a sheet of paper, creating a printed page. The metal shapes came\nin boxes, one per letter, so you’d have a (large) box of e’s, a (small)\nbox of x’s, and so on. The boxes came in cases (one for\nupper'
      < em attributes={} style={} >
        'case'
      ' and one for lower'
      < em attributes={} style={} >
        'case'
      ' letters). The set of\ncases was called a font.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'The word is related to '
          < em attributes={} style={} >
            'foundry'
          ', which would create\nthe little metal shapes.'
      ' Naturally, if you wanted to print\nlarger text, you needed different (bigger) shapes, so those were a\ndifferent font; a collection of fonts was called a '
      < em attributes={} style={} >
        'type'
      ', which\nis why we call it typing. Variations—like bold or italic letters—were\ncalled that type’s “faces”.'
    < p attributes={} style={} >
      'This nomenclature reflects the world of the printing press: metal\nshapes in boxes in cases of different types. Our modern world instead\nhas dropdown menus, and the old words no longer match it. “Font” can now\nmean font, typeface, or type,'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Let alone “font family”, which can refer to larger or\nsmaller collections of types.'
      ' and we say a font contains\nseveral different '
      < em attributes={} style={} >
        'weights'
      ' (like “bold” and “normal”),'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'But sometimes other weights as\nwell, like “light”, “semibold”, “black”, and “condensed”. Good fonts\ntend to come in many weights.'
      ' several different\n'
      < em attributes={} style={} >
        'styles'
      ' (like “italic” and “roman”, which is what not-italic is\ncalled),'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Sometimes there\nare other options as well, like maybe there’s a small-caps version;\nthese are sometimes called '
          < em attributes={} style={} >
            'options'
          ' as well. And don’t get me\nstarted on automatic versus manual italics.'
      ' and arbitrary\n'
      < em attributes={} style={} >
        'sizes'
      '.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Font\nlooks especially good at certain sizes where '
          < em attributes={} style={} >
            'hints'
          ' tell the\ncomputer how to best to align it to the pixel grid.'
      '\nWelcome to the world of magic ink.'
    < p attributes={} style={} >
      'Yet Tk’s '
      < em attributes={} style={} >
        'font objects'
      ' correspond to the older meaning of\nfont: a type at a fixed size, style, and weight. For example:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'You can only create\n'
          < code attributes={} style={} >
            'Font'
          ' objects, or any other kinds of Tk objects, after\ncalling '
          < code attributes={} style={} >
            'tkinter.Tk()'
          ', which is why I’m putting this code in\nthe Browser constructor.'
    < div attributes={'class': 'sourceCode', 'id': 'cb1', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb1-1'} style={} >
            < a attributes={'href': '#cb1-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'im'} style={} >
              'import'
            ' tkinter.font'
          < span attributes={'id': 'cb1-2'} style={} >
            < a attributes={'href': '#cb1-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
          < span attributes={'id': 'cb1-3'} style={} >
            < a attributes={'href': '#cb1-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Browser:'
          < span attributes={'id': 'cb1-4'} style={} >
            < a attributes={'href': '#cb1-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            '):'
          < span attributes={'id': 'cb1-5'} style={} >
            < a attributes={'href': '#cb1-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb1-6'} style={} >
            < a attributes={'href': '#cb1-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        bi_times '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tkinter.font.Font('
          < span attributes={'id': 'cb1-7'} style={} >
            < a attributes={'href': '#cb1-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            family'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Times"'
            ','
          < span attributes={'id': 'cb1-8'} style={} >
            < a attributes={'href': '#cb1-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
            ','
          < span attributes={'id': 'cb1-9'} style={} >
            < a attributes={'href': '#cb1-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            weight'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"bold"'
            ','
          < span attributes={'id': 'cb1-10'} style={} >
            < a attributes={'href': '#cb1-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            slant'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"italic"'
            ','
          < span attributes={'id': 'cb1-11'} style={} >
            < a attributes={'href': '#cb1-11', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        )'
    < div attributes={'class': 'quirk'} style={} >
      < p attributes={} style={} >
        'Your computer might not have “Times” installed; you can list the\navailable fonts with '
        < code attributes={} style={} >
          'tkinter.font.families()'
        ' and pick\nsomething else.'
    < p attributes={} style={} >
      'Font objects can be passed to '
      < code attributes={} style={} >
        'create_text'
      '’s\n'
      < code attributes={} style={} >
        'font'
      ' argument:'
    < div attributes={'class': 'sourceCode', 'id': 'cb2', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb2-1'} style={} >
            < a attributes={'href': '#cb2-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'canvas.create_text('
            < span attributes={'class': 'dv'} style={} >
              '200'
            ', '
            < span attributes={'class': 'dv'} style={} >
              '100'
            ', text'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Hi!"'
            ', font'
            < span attributes={'class': 'op'} style={} >
              '='
            'bi_times)'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'In the olden times, American type setters kept their boxes of metal\nshapes arranged in a '
        < a attributes={'href': 'http://www.alembicpress.co.uk/Typecases/CJCCASE.HTM'} style={} >
          'California\njob case'
        ', which combined lower- and upper-case letters side by side\nin one case, making type setting easier. The upper-/lower-case\nnomenclature dates from centuries earlier.'
    < h1 attributes={'id': 'measuring-text'} style={} >
      'Measuring text'
    < p attributes={} style={} >
      'Text takes up space vertically and horizontally, and the font\nobject’s '
      < code attributes={} style={} >
        'metrics'
      ' and '
      < code attributes={} style={} >
        'measure'
      ' methods measure\nthat space:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'On your\ncomputer, you might get different numbers. That’s right—text rendering\nis OS-dependent, because it is complex enough that everyone uses one of\na few libraries to do it, usually libraries that ship with the OS.\nThat’s why macOS fonts tend to be “blurrier” than the same font on\nWindows: different libraries make different\ntrade-offs.'
    < div attributes={'class': 'sourceCode', 'id': 'cb3', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb3-1'} style={} >
            < a attributes={'href': '#cb3-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' bi_times.metrics()'
          < span attributes={'id': 'cb3-2'} style={} >
            < a attributes={'href': '#cb3-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '{'
            < span attributes={'class': 'st'} style={} >
              "'ascent'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '15'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'descent'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '7'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'linespace'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '22'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'fixed'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '0'
            '}'
          < span attributes={'id': 'cb3-3'} style={} >
            < a attributes={'href': '#cb3-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' bi_times.measure('
            < span attributes={'class': 'st'} style={} >
              '"Hi!"'
            ')'
          < span attributes={'id': 'cb3-4'} style={} >
            < a attributes={'href': '#cb3-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'dv'} style={} >
              '31'
    < p attributes={} style={} >
      'The '
      < code attributes={} style={} >
        'metrics'
      ' call yields information about the vertical\ndimensions of the text: the '
      < code attributes={} style={} >
        'linespace'
      ' is how tall the text\nis, which includes an '
      < code attributes={} style={} >
        'ascent'
      ' which goes “above the line”\nand a '
      < code attributes={} style={} >
        'descent'
      ' that goes “below the line”.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'The '
          < code attributes={} style={} >
            'fixed'
          '\nparameter is actually a boolean and tells you whether all letters are\nthe same '
          < em attributes={} style={} >
            'width'
          ', so it doesn’t really fit here.'
      '\nThe '
      < code attributes={} style={} >
        'ascent'
      ' and '
      < code attributes={} style={} >
        'descent'
      ' matter when words in\ndifferent sizes sit on the same line: they ought to line up “along the\nline”, not along their tops or bottoms.'
    < p attributes={} style={} >
      'Let’s dig deeper. Remember that '
      < code attributes={} style={} >
        'bi_times'
      ' is size-16\nTimes: why does '
      < code attributes={} style={} >
        'font.metrics'
      ' report that it is actually 22\npixels tall? Well, first of all, size-16 meant sixteen '
      < em attributes={} style={} >
        'points'
      ',\nwhich are defined as 72'
      < sup attributes={} style={} >
        'nd'
      's of an inch, not sixteen\n'
      < em attributes={} style={} >
        'pixels'
      ', which your monitor probably has around 100 of per\ninch.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Tk doesn’t use\npoints anywhere else in its API. It’s supposed to use pixels if you pass\nit a negative number, but that doesn’t appear to work.'
      '\nThose sixteen points measure not the individual letters but the metal\nblocks the letters were once carved from, which by necessity were larger\nthan the letters themselves. In fact, different size-16 fonts have\nletters of varying heights:'
    < div attributes={'class': 'sourceCode', 'id': 'cb4', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb4-1'} style={} >
            < a attributes={'href': '#cb4-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' tkinter.font.Font(family'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Courier"'
            ', size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
            ').metrics()'
          < span attributes={'id': 'cb4-2'} style={} >
            < a attributes={'href': '#cb4-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '{'
            < span attributes={'class': 'st'} style={} >
              "'fixed'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '1'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'ascent'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '13'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'descent'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '4'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'linespace'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '17'
            '}'
          < span attributes={'id': 'cb4-3'} style={} >
            < a attributes={'href': '#cb4-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' tkinter.font.Font(family'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Times"'
            ', size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
            ').metrics()'
          < span attributes={'id': 'cb4-4'} style={} >
            < a attributes={'href': '#cb4-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '{'
            < span attributes={'class': 'st'} style={} >
              "'fixed'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '0'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'ascent'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '14'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'descent'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '4'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'linespace'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '18'
            '}'
          < span attributes={'id': 'cb4-5'} style={} >
            < a attributes={'href': '#cb4-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' tkinter.font.Font(family'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Helvetica"'
            ', size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
            ').metrics()'
          < span attributes={'id': 'cb4-6'} style={} >
            < a attributes={'href': '#cb4-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '{'
            < span attributes={'class': 'st'} style={} >
              "'fixed'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '0'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'ascent'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '15'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'descent'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '4'
            ', '
            < span attributes={'class': 'st'} style={} >
              "'linespace'"
            ': '
            < span attributes={'class': 'dv'} style={} >
              '19'
            '}'
    < p attributes={} style={} >
      'The '
      < code attributes={} style={} >
        'measure()'
      ' method is more direct: it tells you how\nmuch '
      < em attributes={} style={} >
        'horizontal'
      ' space text takes up, in pixels. This depends on\nthe text, of course, since different letters have different width:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'The sum at the end of this\nsnippet may not work on your machine: the width of a word is not always\nthe sum of the widths of its letters. That’s because Tk uses fractional\npixels internally, but rounds up to return whole pixels. For example,\nsome fonts use something called '
          < em attributes={} style={} >
            'kerning'
          ' to shift letters a\nlittle bit when particular pairs of letters are next to one\nanother.'
    < div attributes={'class': 'sourceCode', 'id': 'cb5', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb5-1'} style={} >
            < a attributes={'href': '#cb5-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' bi_times.measure('
            < span attributes={'class': 'st'} style={} >
              '"Hi!"'
            ')'
          < span attributes={'id': 'cb5-2'} style={} >
            < a attributes={'href': '#cb5-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'dv'} style={} >
              '31'
          < span attributes={'id': 'cb5-3'} style={} >
            < a attributes={'href': '#cb5-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' bi_times.measure('
            < span attributes={'class': 'st'} style={} >
              '"H"'
            ')'
          < span attributes={'id': 'cb5-4'} style={} >
            < a attributes={'href': '#cb5-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'dv'} style={} >
              '17'
          < span attributes={'id': 'cb5-5'} style={} >
            < a attributes={'href': '#cb5-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' bi_times.measure('
            < span attributes={'class': 'st'} style={} >
              '"i"'
            ')'
          < span attributes={'id': 'cb5-6'} style={} >
            < a attributes={'href': '#cb5-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'dv'} style={} >
              '6'
          < span attributes={'id': 'cb5-7'} style={} >
            < a attributes={'href': '#cb5-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            ' bi_times.measure('
            < span attributes={'class': 'st'} style={} >
              '"!"'
            ')'
          < span attributes={'id': 'cb5-8'} style={} >
            < a attributes={'href': '#cb5-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'dv'} style={} >
              '8'
          < span attributes={'id': 'cb5-9'} style={} >
            < a attributes={'href': '#cb5-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'op'} style={} >
              '>>>'
            < span attributes={'class': 'dv'} style={} >
              '17'
            < span attributes={'class': 'op'} style={} >
              '+'
            < span attributes={'class': 'dv'} style={} >
              '8'
            < span attributes={'class': 'op'} style={} >
              '+'
            < span attributes={'class': 'dv'} style={} >
              '6'
          < span attributes={'id': 'cb5-10'} style={} >
            < a attributes={'href': '#cb5-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'dv'} style={} >
              '31'
    < p attributes={} style={} >
      'You can use this information to lay text out on the page. For\nexample, suppose you want to draw the text “Hello, world!” in two\npieces, so that “world!” is italic. Let’s use two fonts:'
    < div attributes={'class': 'sourceCode', 'id': 'cb6', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb6-1'} style={} >
            < a attributes={'href': '#cb6-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'font1 '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tkinter.font.Font(family'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Times"'
            ', size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
            ')'
          < span attributes={'id': 'cb6-2'} style={} >
            < a attributes={'href': '#cb6-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'font2 '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tkinter.font.Font(family'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Times"'
            ', size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
            ', slant'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              "'italic'"
            ')'
    < p attributes={} style={} >
      'We can now lay out the text, starting at '
      < code attributes={} style={} >
        '(200, 200)'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb7', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb7-1'} style={} >
            < a attributes={'href': '#cb7-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'x, y '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '200'
            ', '
            < span attributes={'class': 'dv'} style={} >
              '200'
          < span attributes={'id': 'cb7-2'} style={} >
            < a attributes={'href': '#cb7-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'canvas.create_text(x, y, text'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Hello, "'
            ', font'
            < span attributes={'class': 'op'} style={} >
              '='
            'font1)'
          < span attributes={'id': 'cb7-3'} style={} >
            < a attributes={'href': '#cb7-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'x '
            < span attributes={'class': 'op'} style={} >
              '+='
            ' font1.measure('
            < span attributes={'class': 'st'} style={} >
              '"Hello, "'
            ')'
          < span attributes={'id': 'cb7-4'} style={} >
            < a attributes={'href': '#cb7-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'canvas.create_text(x, y, text'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"world!"'
            ', font'
            < span attributes={'class': 'op'} style={} >
              '='
            'font2)'
    < p attributes={} style={} >
      'You should see “Hello,” and “world!”, correctly aligned and with the\nsecond word italicized.'
    < p attributes={} style={} >
      'Unfortunately, this code has a bug, though one masked by the choice\nof example text: replace “world!” with “overlapping!” and the two words\nwill overlap. That’s because the coordinates '
      < code attributes={} style={} >
        'x'
      ' and\n'
      < code attributes={} style={} >
        'y'
      ' that you pass to '
      < code attributes={} style={} >
        'create_text'
      ' tell Tk where\nto put the '
      < em attributes={} style={} >
        'center'
      ' of the text. It only worked for “Hello,\nworld!” because “Hello,” and “world!” are the same length!'
    < p attributes={} style={} >
      'Luckily, the meaning of the coordinate you pass in is configurable.\nWe can instruct Tk to treat the coordinate we gave as the top-left\ncorner of the text by setting the '
      < code attributes={} style={} >
        'anchor'
      ' argument to\n'
      < code attributes={} style={} >
        '"nw"'
      ', meaning the “northwest” corner of the text:'
    < div attributes={'class': 'sourceCode', 'id': 'cb8', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb8-1'} style={} >
            < a attributes={'href': '#cb8-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'x, y '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '200'
            ', '
            < span attributes={'class': 'dv'} style={} >
              '225'
          < span attributes={'id': 'cb8-2'} style={} >
            < a attributes={'href': '#cb8-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'canvas.create_text(x, y, text'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"Hello, "'
            ', font'
            < span attributes={'class': 'op'} style={} >
              '='
            'font1, anchor'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              "'nw'"
            ')'
          < span attributes={'id': 'cb8-3'} style={} >
            < a attributes={'href': '#cb8-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'x '
            < span attributes={'class': 'op'} style={} >
              '+='
            ' font1.measure('
            < span attributes={'class': 'st'} style={} >
              '"Hello, "'
            ')'
          < span attributes={'id': 'cb8-4'} style={} >
            < a attributes={'href': '#cb8-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'canvas.create_text(x, y, text'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"overlapping!"'
            ', font'
            < span attributes={'class': 'op'} style={} >
              '='
            'font2, anchor'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              "'nw'"
            ')'
    < p attributes={} style={} >
      'Modify the '
      < code attributes={} style={} >
        'draw'
      ' function to set '
      < code attributes={} style={} >
        'anchor'
      ' to\n'
      < code attributes={} style={} >
        '"nw"'
      '; we didn’t need to do that in the previous chapter\nbecause all Chinese characters are the same width.'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'If you find font metrics confusing, you’re not the only one! In 2012,\nthe Michigan Supreme Court heard '
        < a attributes={'href': 'https://publicdocs.courts.mi.gov/opinions/final/sct/20120803_s145387_157_standup-op.pdf'} style={} >
          < em attributes={} style={} >
            'Stand\nUp for Democracy v. Secretary of State'
        ', a case that centered on\nthe definition of font size. The court decided (correctly) that font\nsize is the size of the metal blocks that letters were carved from and\nnot the size of the letters themselves.'
    < h1 attributes={'id': 'word-by-word'} style={} >
      'Word by word'
    < p attributes={} style={} >
      'In the last chapter, the '
      < code attributes={} style={} >
        'layout'
      ' function looped over the\ntext character-by-character and moved to the next line whenever we ran\nout of space. That’s appropriate in Chinese, where each character more\nor less '
      < em attributes={} style={} >
        'is'
      ' a word. But in English you can’t move to the next\nline in the middle of a word. Instead, we need to lay out the text one\nword at a time:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'This code\nsplits words on whitespace. It’ll thus break on Chinese, since there\nwon’t be whitespace between words. Real browsers use language-dependent\nrules for laying out text, including for identifying word\nboundaries.'
    < div attributes={'class': 'sourceCode', 'id': 'cb9', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb9-1'} style={} >
            < a attributes={'href': '#cb9-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' word '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' text.split():'
          < span attributes={'id': 'cb9-2'} style={} >
            < a attributes={'href': '#cb9-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    w '
            < span attributes={'class': 'op'} style={} >
              '='
            ' font.measure(word)'
          < span attributes={'id': 'cb9-3'} style={} >
            < a attributes={'href': '#cb9-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' cursor_x '
            < span attributes={'class': 'op'} style={} >
              '+'
            ' w '
            < span attributes={'class': 'op'} style={} >
              '>'
            ' WIDTH '
            < span attributes={'class': 'op'} style={} >
              '-'
            ' HSTEP:'
          < span attributes={'id': 'cb9-4'} style={} >
            < a attributes={'href': '#cb9-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        cursor_y '
            < span attributes={'class': 'op'} style={} >
              '+='
            ' font.metrics('
            < span attributes={'class': 'st'} style={} >
              '"linespace"'
            ') '
            < span attributes={'class': 'op'} style={} >
              '*'
            < span attributes={'class': 'fl'} style={} >
              '1.25'
          < span attributes={'id': 'cb9-5'} style={} >
            < a attributes={'href': '#cb9-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        cursor_x '
            < span attributes={'class': 'op'} style={} >
              '='
            ' HSTEP'
          < span attributes={'id': 'cb9-6'} style={} >
            < a attributes={'href': '#cb9-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.display_list.append((cursor_x, cursor_y, word))'
          < span attributes={'id': 'cb9-7'} style={} >
            < a attributes={'href': '#cb9-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    cursor_x '
            < span attributes={'class': 'op'} style={} >
              '+='
            ' w '
            < span attributes={'class': 'op'} style={} >
              '+'
            ' font.measure('
            < span attributes={'class': 'st'} style={} >
              '" "'
            ')'
    < p attributes={} style={} >
      'There’s a lot of moving parts to this code. First, we measure the\nwidth of the text, and store it in '
      < code attributes={} style={} >
        'w'
      '. We’d normally draw\nthe text at '
      < code attributes={} style={} >
        'cursor_x'
      ', so its right end would be at\n'
      < code attributes={} style={} >
        'cursor_x + w'
      ', so we check if that’s past the edge of the\npage. Now we have the location to '
      < em attributes={} style={} >
        'start'
      ' drawing the word, so we\nadd to the display list; and finally we update '
      < code attributes={} style={} >
        'cursor_x'
      ' to\npoint to the end of the word.'
    < p attributes={} style={} >
      'There are a few surprises in this code. One is that I call\n'
      < code attributes={} style={} >
        'metrics'
      ' with an argument; that just returns the named\nmetric directly. Also, I increment '
      < code attributes={} style={} >
        'cursor_x'
      ' by\n'
      < code attributes={} style={} >
        'w + font.measure(" ")'
      ' instead of '
      < code attributes={} style={} >
        'w'
      '. That’s\nbecause I want to have spaces between the words: the call to\n'
      < code attributes={} style={} >
        'split()'
      ' removed all of the whitespace, and this adds it\nback. I don’t add the space to '
      < code attributes={} style={} >
        'w'
      ' on the second line,\nthough, because you don’t need a space after the last word on a\nline.'
    < p attributes={} style={} >
      'Finally, note that I multiply the linespace by 1.25 when incrementing\n'
      < code attributes={} style={} >
        'y'
      '. Try removing the multiplier: you’ll see that the text is\nharder to read because the lines are too close together.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Designers say the text is too\n“tight”.'
      ' Instead, it is common to add “line spacing” or\n“leading”'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'So named\nbecause in metal type days, thin pieces of lead were placed between the\nlines to space them out. Lead is a softer metal than what the actual\nletter pieces were made of, so it could compress a little to keep\npressure on the other pieces. Pronounce it “led-ing” not\n“leed-ing”.'
      ' between lines. The 25% line spacing is a\nnormal amount.'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'Breaking lines in the middle of a word is called hyphenation, and can\nbe turned on via the '
        < a attributes={'href': 'https://drafts.csswg.org/css-text-3/#hyphens-property'} style={} >
          < code attributes={} style={} >
            'hyphens'
          '\nCSS property'
        '. Browsers use the '
        < a attributes={'href': 'http://www.tug.org/docs/liang/liang-thesis.pdf'} style={} >
          'Knuth-Liang\nhyphenation algorithm'
        ', which uses a dictionary of word fragments to\nprioritize possible hyphenation points, to implement this.'
    < h1 attributes={'id': 'styling-text'} style={} >
      'Styling text'
    < p attributes={} style={} >
      'Right now, all of the text on the page is drawn with one font. But\nweb pages sometimes '
      < strong attributes={} style={} >
        'bold'
      ' or '
      < em attributes={} style={} >
        'italicize'
      ' text\nusing the '
      < code attributes={} style={} >
        '<b>'
      ' and '
      < code attributes={} style={} >
        '<i>'
      ' tags. It’d\nbe nice to support that, but right now, the code resists the change: the\n'
      < code attributes={} style={} >
        'layout'
      ' function only receives the text of the page as\ninput, and so has no idea where the bold and italics tags are.'
    < p attributes={} style={} >
      'Let’s change '
      < code attributes={} style={} >
        'lex'
      ' to return a list of '
      < em attributes={} style={} >
        'tokens'
      ',\nwhere a token is either a '
      < code attributes={} style={} >
        'Text'
      ' object (for a run of\ncharacters outside a tag) or a '
      < code attributes={} style={} >
        'Tag'
      ' object (for the contents\nof a tag). You’ll need to write the '
      < code attributes={} style={} >
        'Text'
      ' and\n'
      < code attributes={} style={} >
        'Tag'
      ' classes:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'If you’re familiar with Python, you might want to use the\n'
          < code attributes={} style={} >
            'dataclass'
          ' library, which makes it easier to define these\nsorts of utility classes.'
    < div attributes={'class': 'sourceCode', 'id': 'cb10'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb10-1'} style={} >
            < a attributes={'href': '#cb10-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Text:'
          < span attributes={'id': 'cb10-2'} style={} >
            < a attributes={'href': '#cb10-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', text):'
          < span attributes={'id': 'cb10-3'} style={} >
            < a attributes={'href': '#cb10-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.text '
            < span attributes={'class': 'op'} style={} >
              '='
            ' text'
          < span attributes={'id': 'cb10-4'} style={} >
            < a attributes={'href': '#cb10-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
          < span attributes={'id': 'cb10-5'} style={} >
            < a attributes={'href': '#cb10-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Tag:'
          < span attributes={'id': 'cb10-6'} style={} >
            < a attributes={'href': '#cb10-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb10-7'} style={} >
            < a attributes={'href': '#cb10-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.tag '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tag'
    < p attributes={} style={} >
      < code attributes={} style={} >
        'lex'
      ' must now gather text into '
      < code attributes={} style={} >
        'Text'
      ' and\n'
      < code attributes={} style={} >
        'Tag'
      ' objects:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'If you’ve done exercises in prior chapters, your code will\nlook different. Code snippets in the book always assume you haven’t done\nthe exercises, so you’ll need to port your\nmodifications.'
    < div attributes={'class': 'sourceCode', 'id': 'cb11'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb11-1'} style={} >
            < a attributes={'href': '#cb11-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' lex(body):'
          < span attributes={'id': 'cb11-2'} style={} >
            < a attributes={'href': '#cb11-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    out '
            < span attributes={'class': 'op'} style={} >
              '='
            ' []'
          < span attributes={'id': 'cb11-3'} style={} >
            < a attributes={'href': '#cb11-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    text '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '""'
          < span attributes={'id': 'cb11-4'} style={} >
            < a attributes={'href': '#cb11-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    in_tag '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'False'
          < span attributes={'id': 'cb11-5'} style={} >
            < a attributes={'href': '#cb11-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' c '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' body:'
          < span attributes={'id': 'cb11-6'} style={} >
            < a attributes={'href': '#cb11-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' c '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"<"'
            ':'
          < span attributes={'id': 'cb11-7'} style={} >
            < a attributes={'href': '#cb11-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            in_tag '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'True'
          < span attributes={'id': 'cb11-8'} style={} >
            < a attributes={'href': '#cb11-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' text: out.append(Text(text))'
          < span attributes={'id': 'cb11-9'} style={} >
            < a attributes={'href': '#cb11-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            text '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '""'
          < span attributes={'id': 'cb11-10'} style={} >
            < a attributes={'href': '#cb11-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' c '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '">"'
            ':'
          < span attributes={'id': 'cb11-11'} style={} >
            < a attributes={'href': '#cb11-11', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            in_tag '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'False'
          < span attributes={'id': 'cb11-12'} style={} >
            < a attributes={'href': '#cb11-12', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            out.append(Tag(text))'
          < span attributes={'id': 'cb11-13'} style={} >
            < a attributes={'href': '#cb11-13', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            text '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '""'
          < span attributes={'id': 'cb11-14'} style={} >
            < a attributes={'href': '#cb11-14', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb11-15'} style={} >
            < a attributes={'href': '#cb11-15', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            text '
            < span attributes={'class': 'op'} style={} >
              '+='
            ' c'
          < span attributes={'id': 'cb11-16'} style={} >
            < a attributes={'href': '#cb11-16', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'kw'} style={} >
              'not'
            ' in_tag '
            < span attributes={'class': 'kw'} style={} >
              'and'
            ' text:'
          < span attributes={'id': 'cb11-17'} style={} >
            < a attributes={'href': '#cb11-17', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        out.append(Text(text))'
          < span attributes={'id': 'cb11-18'} style={} >
            < a attributes={'href': '#cb11-18', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'return'
            ' out'
    < p attributes={} style={} >
      'At the end of the loop, '
      < code attributes={} style={} >
        'lex'
      ' dumps any accumulated text\nas a '
      < code attributes={} style={} >
        'Text'
      ' object. Otherwise, if you never saw an angle\nbracket, you’d return an empty list of tokens. But unfinished tags, like\nin '
      < code attributes={} style={} >
        'Hi!<hr'
      ', are thrown out.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'This may strike you as an odd\ndecision: why not raise an error, or finish up the tag for the author?\nGood questions, but dropping the tag is what browsers\ndo.'
    < p attributes={} style={} >
      'Note that '
      < code attributes={} style={} >
        'Text'
      ' and '
      < code attributes={} style={} >
        'Tag'
      ' are asymmetric:\n'
      < code attributes={} style={} >
        'lex'
      ' avoids empty '
      < code attributes={} style={} >
        'Text'
      ' objects, but not empty\n'
      < code attributes={} style={} >
        'Tag'
      ' objects. That’s because an empty '
      < code attributes={} style={} >
        'Tag'
      '\nobject represents the HTML code '
      < code attributes={} style={} >
        '<>'
      ', while an empty\n'
      < code attributes={} style={} >
        'Text'
      ' object with empty text represents no content at\nall.'
    < p attributes={} style={} >
      'Since we’ve modified '
      < code attributes={} style={} >
        'lex'
      ' we are now passing\n'
      < code attributes={} style={} >
        'layout'
      ' not just the text of the page, but also the tags in\nit. So '
      < code attributes={} style={} >
        'layout'
      ' must loop over tokens, not text:'
    < div attributes={'class': 'sourceCode', 'id': 'cb12', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb12-1'} style={} >
            < a attributes={'href': '#cb12-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' layout(tokens):'
          < span attributes={'id': 'cb12-2'} style={} >
            < a attributes={'href': '#cb12-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb12-3'} style={} >
            < a attributes={'href': '#cb12-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' tok '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' tokens:'
          < span attributes={'id': 'cb12-4'} style={} >
            < a attributes={'href': '#cb12-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'bu'} style={} >
              'isinstance'
            '(tok, Text):'
          < span attributes={'id': 'cb12-5'} style={} >
            < a attributes={'href': '#cb12-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' word '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' tok.text.split():'
          < span attributes={'id': 'cb12-6'} style={} >
            < a attributes={'href': '#cb12-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb12-7'} style={} >
            < a attributes={'href': '#cb12-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      < code attributes={} style={} >
        'layout'
      ' can also examine tag tokens to change font when\ndirected by the page. Let’s start with support for weights and styles,\nwith two corresponding variables:'
    < div attributes={'class': 'sourceCode', 'id': 'cb13', 'data-replace': 'weight/self.weight,style/self.style'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb13-1'} style={} >
            < a attributes={'href': '#cb13-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'weight '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"normal"'
          < span attributes={'id': 'cb13-2'} style={} >
            < a attributes={'href': '#cb13-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'style '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"roman"'
    < p attributes={} style={} >
      'Those variables must change when the bold and italics open and close\ntags are seen:'
    < div attributes={'class': 'sourceCode', 'id': 'cb14', 'data-replace': 'weight/self.weight,style/self.style', 'data-indent': '8'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb14-1'} style={} >
            < a attributes={'href': '#cb14-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'bu'} style={} >
              'isinstance'
            '(tok, Text):'
          < span attributes={'id': 'cb14-2'} style={} >
            < a attributes={'href': '#cb14-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb14-3'} style={} >
            < a attributes={'href': '#cb14-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"i"'
            ':'
          < span attributes={'id': 'cb14-4'} style={} >
            < a attributes={'href': '#cb14-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    style '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"italic"'
          < span attributes={'id': 'cb14-5'} style={} >
            < a attributes={'href': '#cb14-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"/i"'
            ':'
          < span attributes={'id': 'cb14-6'} style={} >
            < a attributes={'href': '#cb14-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    style '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"roman"'
          < span attributes={'id': 'cb14-7'} style={} >
            < a attributes={'href': '#cb14-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"b"'
            ':'
          < span attributes={'id': 'cb14-8'} style={} >
            < a attributes={'href': '#cb14-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    weight '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"bold"'
          < span attributes={'id': 'cb14-9'} style={} >
            < a attributes={'href': '#cb14-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"/b"'
            ':'
          < span attributes={'id': 'cb14-10'} style={} >
            < a attributes={'href': '#cb14-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    weight '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"normal"'
    < p attributes={} style={} >
      'Note that this code correctly handles not only\n'
      < code attributes={} style={} >
        '<b>bold</b>'
      ' and\n'
      < code attributes={} style={} >
        '<i>italic</i>'
      ' text, but also\n'
      < code attributes={} style={} >
        '<b><i>bold italic</i></b>'
      '\ntext.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'It even handles\nmis-nested tags like\n'
          < code attributes={} style={} >
            '<b>b<i>bi</b>i</i>'
          ', but it does not\nhandle '
          < code attributes={} style={} >
            '<b><b>twice</b>bolded</b>'
          '\ntext. We’ll return to both in the '
          < a attributes={'href': 'html.html'} style={} >
            'next\nchapter'
          '.'
    < p attributes={} style={} >
      'The '
      < code attributes={} style={} >
        'bold'
      ' and '
      < code attributes={} style={} >
        'italic'
      ' variables are used to\nselect the font. Since the font is computed in '
      < code attributes={} style={} >
        'layout'
      ' but\nused in '
      < code attributes={} style={} >
        'draw'
      ', we’ll need to add the font used to each entry\nin the display list.'
    < div attributes={'class': 'sourceCode', 'id': 'cb15', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb15-1'} style={} >
            < a attributes={'href': '#cb15-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'bu'} style={} >
              'isinstance'
            '(tok, Text):'
          < span attributes={'id': 'cb15-2'} style={} >
            < a attributes={'href': '#cb15-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    font '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tkinter.font.Font('
          < span attributes={'id': 'cb15-3'} style={} >
            < a attributes={'href': '#cb15-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
            ','
          < span attributes={'id': 'cb15-4'} style={} >
            < a attributes={'href': '#cb15-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        weight'
            < span attributes={'class': 'op'} style={} >
              '='
            'weight,'
          < span attributes={'id': 'cb15-5'} style={} >
            < a attributes={'href': '#cb15-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        slant'
            < span attributes={'class': 'op'} style={} >
              '='
            'style,'
          < span attributes={'id': 'cb15-6'} style={} >
            < a attributes={'href': '#cb15-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    )'
          < span attributes={'id': 'cb15-7'} style={} >
            < a attributes={'href': '#cb15-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' word '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' tok.text.split():'
          < span attributes={'id': 'cb15-8'} style={} >
            < a attributes={'href': '#cb15-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb15-9'} style={} >
            < a attributes={'href': '#cb15-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        display_list.append((cursor_x, cursor_y, word, font))'
    < p attributes={} style={} >
      'Make sure to update '
      < code attributes={} style={} >
        'draw'
      ' to expect and use this extra\nfont field in display list entries.'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        < em attributes={} style={} >
          'Italic'
        ' fonts were developed in Italy (hence the name) to\nmimic a cursive handwriting style called “'
        < a attributes={'href': 'https://en.wikipedia.org/wiki/Chancery_hand'} style={} >
          'chancery hand'
        '”.\nNon-italic fonts are called '
        < em attributes={} style={} >
          'roman'
        ' because they mimic text on\nRoman monuments. There is an obscure third option: '
        < a attributes={'href': 'https://en.wikipedia.org/wiki/Oblique_type'} style={} >
          < em attributes={} style={} >
            'oblique'
          '\nfonts'
        ', which look like roman fonts but are slanted.'
    < h1 attributes={'id': 'a-layout-object'} style={} >
      'A layout object'
    < p attributes={} style={} >
      'With all of these tags, '
      < code attributes={} style={} >
        'layout'
      ' has become quite large,\nwith lots of local variables and some complicated control flow. That is\none sign that something deserves to be a class, not a function:'
    < div attributes={'class': 'sourceCode', 'id': 'cb16'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb16-1'} style={} >
            < a attributes={'href': '#cb16-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Layout:'
          < span attributes={'id': 'cb16-2'} style={} >
            < a attributes={'href': '#cb16-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tokens):'
          < span attributes={'id': 'cb16-3'} style={} >
            < a attributes={'href': '#cb16-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.display_list '
            < span attributes={'class': 'op'} style={} >
              '='
            ' []'
    < p attributes={} style={} >
      'Every local variable in '
      < code attributes={} style={} >
        'layout'
      ' then becomes a field of\n'
      < code attributes={} style={} >
        'Layout'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb17'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb17-1'} style={} >
            < a attributes={'href': '#cb17-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.cursor_x '
            < span attributes={'class': 'op'} style={} >
              '='
            ' HSTEP'
          < span attributes={'id': 'cb17-2'} style={} >
            < a attributes={'href': '#cb17-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.cursor_y '
            < span attributes={'class': 'op'} style={} >
              '='
            ' VSTEP'
          < span attributes={'id': 'cb17-3'} style={} >
            < a attributes={'href': '#cb17-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.weight '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"normal"'
          < span attributes={'id': 'cb17-4'} style={} >
            < a attributes={'href': '#cb17-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.style '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"roman"'
          < span attributes={'id': 'cb17-5'} style={} >
            < a attributes={'href': '#cb17-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.size '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
    < p attributes={} style={} >
      'The core of the old '
      < code attributes={} style={} >
        'layout'
      ' is a loop over tokens, and we\ncan move the body of that loop to a method on '
      < code attributes={} style={} >
        'Layout'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb18'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb18-1'} style={} >
            < a attributes={'href': '#cb18-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tokens):'
          < span attributes={'id': 'cb18-2'} style={} >
            < a attributes={'href': '#cb18-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb18-3'} style={} >
            < a attributes={'href': '#cb18-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' tok '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' tokens:'
          < span attributes={'id': 'cb18-4'} style={} >
            < a attributes={'href': '#cb18-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.token(tok)'
          < span attributes={'id': 'cb18-5'} style={} >
            < a attributes={'href': '#cb18-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
          < span attributes={'id': 'cb18-6'} style={} >
            < a attributes={'href': '#cb18-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' token('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tok):'
          < span attributes={'id': 'cb18-7'} style={} >
            < a attributes={'href': '#cb18-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'bu'} style={} >
              'isinstance'
            '(tok, Text):'
          < span attributes={'id': 'cb18-8'} style={} >
            < a attributes={'href': '#cb18-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb18-9'} style={} >
            < a attributes={'href': '#cb18-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"i"'
            ':'
          < span attributes={'id': 'cb18-10'} style={} >
            < a attributes={'href': '#cb18-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.style '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"italic"'
          < span attributes={'id': 'cb18-11'} style={} >
            < a attributes={'href': '#cb18-11', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'In fact, the body of the '
      < code attributes={} style={} >
        'isinstance(tok, Text)'
      ' branch\ncan be moved to its own method:'
    < div attributes={'class': 'sourceCode', 'id': 'cb19', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb19-1'} style={} >
            < a attributes={'href': '#cb19-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' text('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tok):'
          < span attributes={'id': 'cb19-2'} style={} >
            < a attributes={'href': '#cb19-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    font '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tkinter.font.Font('
          < span attributes={'id': 'cb19-3'} style={} >
            < a attributes={'href': '#cb19-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
            ','
          < span attributes={'id': 'cb19-4'} style={} >
            < a attributes={'href': '#cb19-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        weight'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.weight,'
          < span attributes={'id': 'cb19-5'} style={} >
            < a attributes={'href': '#cb19-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        slant'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.style,'
          < span attributes={'id': 'cb19-6'} style={} >
            < a attributes={'href': '#cb19-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    )'
          < span attributes={'id': 'cb19-7'} style={} >
            < a attributes={'href': '#cb19-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' word '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' tok.text.split():'
          < span attributes={'id': 'cb19-8'} style={} >
            < a attributes={'href': '#cb19-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'Now that everything has moved out of '
      < code attributes={} style={} >
        'Browser'
      '’s old\n'
      < code attributes={} style={} >
        'layout'
      ' function, it can be replaced with calls into\n'
      < code attributes={} style={} >
        'Layout'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb20'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb20-1'} style={} >
            < a attributes={'href': '#cb20-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Browser:'
          < span attributes={'id': 'cb20-2'} style={} >
            < a attributes={'href': '#cb20-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' load('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', url):'
          < span attributes={'id': 'cb20-3'} style={} >
            < a attributes={'href': '#cb20-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        headers, body '
            < span attributes={'class': 'op'} style={} >
              '='
            ' request(url)'
          < span attributes={'id': 'cb20-4'} style={} >
            < a attributes={'href': '#cb20-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        tokens '
            < span attributes={'class': 'op'} style={} >
              '='
            ' lex(body)'
          < span attributes={'id': 'cb20-5'} style={} >
            < a attributes={'href': '#cb20-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.display_list '
            < span attributes={'class': 'op'} style={} >
              '='
            ' Layout(tokens).display_list'
          < span attributes={'id': 'cb20-6'} style={} >
            < a attributes={'href': '#cb20-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.draw()'
    < p attributes={} style={} >
      'When you do big refactors like this, it’s important to work\nincrementally. It might seem more efficient to change everything at\nonce, that efficiency brings with it a risk of failure: trying to do so\nmuch that you get confused and have to abandon the whole refactor.'
    < p attributes={} style={} >
      'Anyway, this refactor isolated all of the text-handling code into its\nown method, with the main '
      < code attributes={} style={} >
        'token'
      ' function just branching on\nthe tag name. Let’s take advantage of the new, cleaner organization to\nadd more tags. With font weights and styles working, size is the next\nfrontier in typographic sophistication. One simple way to change font\nsize is the '
      < code attributes={} style={} >
        '<small>'
      ' tag and its deprecated sister tag\n'
      < code attributes={} style={} >
        '<big>'
      '.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'In your web design projects, use the CSS\n'
          < code attributes={} style={} >
            'font-size'
          ' property to change text size instead of\n'
          < code attributes={} style={} >
            '<big>'
          ' and '
          < code attributes={} style={} >
            '<small>'
          '. But since we\nhaven’t '
          < a attributes={'href': 'styles.html'} style={} >
            'implemented CSS'
          ' for our browser, we’re\nstuck using them here.'
    < p attributes={} style={} >
      'Our experience with font styles and weights suggests a simple\napproach. First, a field in '
      < code attributes={} style={} >
        'Layout'
      ' to track font size:'
    < div attributes={'class': 'sourceCode', 'id': 'cb21'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb21-1'} style={} >
            < a attributes={'href': '#cb21-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.size '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '16'
    < p attributes={} style={} >
      'That variable is used to create the font object:'
    < div attributes={'class': 'sourceCode', 'id': 'cb22', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb22-1'} style={} >
            < a attributes={'href': '#cb22-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'font '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tkinter.font.Font('
          < span attributes={'id': 'cb22-2'} style={} >
            < a attributes={'href': '#cb22-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    size'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.size,'
          < span attributes={'id': 'cb22-3'} style={} >
            < a attributes={'href': '#cb22-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    weight'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.weight,'
          < span attributes={'id': 'cb22-4'} style={} >
            < a attributes={'href': '#cb22-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    slant'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.style,'
          < span attributes={'id': 'cb22-5'} style={} >
            < a attributes={'href': '#cb22-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            ')'
    < p attributes={} style={} >
      'Finally, the '
      < code attributes={} style={} >
        '<big>'
      ' and '
      < code attributes={} style={} >
        '<small>'
      '\ntags change the value of '
      < code attributes={} style={} >
        'size'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb23'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb23-1'} style={} >
            < a attributes={'href': '#cb23-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' token('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tok):'
          < span attributes={'id': 'cb23-2'} style={} >
            < a attributes={'href': '#cb23-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb23-3'} style={} >
            < a attributes={'href': '#cb23-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"small"'
            ':'
          < span attributes={'id': 'cb23-4'} style={} >
            < a attributes={'href': '#cb23-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.size '
            < span attributes={'class': 'op'} style={} >
              '-='
            < span attributes={'class': 'dv'} style={} >
              '2'
          < span attributes={'id': 'cb23-5'} style={} >
            < a attributes={'href': '#cb23-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"/small"'
            ':'
          < span attributes={'id': 'cb23-6'} style={} >
            < a attributes={'href': '#cb23-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.size '
            < span attributes={'class': 'op'} style={} >
              '+='
            < span attributes={'class': 'dv'} style={} >
              '2'
          < span attributes={'id': 'cb23-7'} style={} >
            < a attributes={'href': '#cb23-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"big"'
            ':'
          < span attributes={'id': 'cb23-8'} style={} >
            < a attributes={'href': '#cb23-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.size '
            < span attributes={'class': 'op'} style={} >
              '+='
            < span attributes={'class': 'dv'} style={} >
              '4'
          < span attributes={'id': 'cb23-9'} style={} >
            < a attributes={'href': '#cb23-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"/big"'
            ':'
          < span attributes={'id': 'cb23-10'} style={} >
            < a attributes={'href': '#cb23-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.size '
            < span attributes={'class': 'op'} style={} >
              '-='
            < span attributes={'class': 'dv'} style={} >
              '4'
    < p attributes={} style={} >
      'Try wrapping a whole paragraph in '
      < code attributes={} style={} >
        '<small>'
      ', like\nyou would a bit of fine print, and enjoy your newfound typographical\nfreedom.'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'All of '
        < code attributes={} style={} >
          '<b>'
        ', '
        < code attributes={} style={} >
          '<i>'
        ',\n'
        < code attributes={} style={} >
          '<big>'
        ', and '
        < code attributes={} style={} >
          '<small>'
        ' date from an\nearlier, pre-CSS era of the web. Since CSS can now change how those tags\nappear, '
        < code attributes={} style={} >
          '<b>'
        ', '
        < code attributes={} style={} >
          '<i>'
        ', and\n'
        < code attributes={} style={} >
          '<small>'
        ' have hair-splitting '
        < a attributes={'href': 'https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-small-element'} style={} >
          'appearance-independent\nmeanings'
        '.'
    < h1 attributes={'id': 'text-of-different-sizes'} style={} >
      'Text of different sizes'
    < p attributes={} style={} >
      'Start mixing font sizes, like\n'
      < code attributes={} style={} >
        '<small>a</small><big>A</big>'
      ', and\nyou’ll quickly notice a problem with the font size code: the text is\naligned along its top, not “along the line”, as if it’s hanging from a\nclothes line.'
    < p attributes={} style={} >
      'Let’s think through how to fix this. If the big text is moved up, it\nwould overlap with the previous line, so the smaller text has to be\nmoved down. That means its vertical position has to be computed later,\n'
      < em attributes={} style={} >
        'after'
      ' the big text passes through '
      < code attributes={} style={} >
        'token'
      '. But since\nthe small text comes through the loop first, we need a '
      < em attributes={} style={} >
        'two-pass'
      '\nalgorithm for lines of text: the first pass identifies what words go in\nthe line and computes their '
      < em attributes={} style={} >
        'x'
      ' positions, while the second pass\nvertically aligns the words and computes their '
      < em attributes={} style={} >
        'y'
      ' positions.'
    < p attributes={} style={} >
      'Let’s start with phase one. Since one line contains text from many\ntags, we need a field on '
      < code attributes={} style={} >
        'Layout'
      ' to store the line-to-be.\nThat field, '
      < code attributes={} style={} >
        'line'
      ', will be a list, and '
      < code attributes={} style={} >
        'text'
      '\nwill add words to it instead of the display list. Entries in\n'
      < code attributes={} style={} >
        'line'
      ' will have '
      < em attributes={} style={} >
        'x'
      ' but not '
      < em attributes={} style={} >
        'y'
      ' positions,\nsince '
      < em attributes={} style={} >
        'y'
      ' positions aren’t computed in the first phase:'
    < div attributes={'class': 'sourceCode', 'id': 'cb24', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb24-1'} style={} >
            < a attributes={'href': '#cb24-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Layout:'
          < span attributes={'id': 'cb24-2'} style={} >
            < a attributes={'href': '#cb24-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tokens):'
          < span attributes={'id': 'cb24-3'} style={} >
            < a attributes={'href': '#cb24-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb24-4'} style={} >
            < a attributes={'href': '#cb24-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.line '
            < span attributes={'class': 'op'} style={} >
              '='
            ' []'
          < span attributes={'id': 'cb24-5'} style={} >
            < a attributes={'href': '#cb24-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb24-6'} style={} >
            < a attributes={'href': '#cb24-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
          < span attributes={'id': 'cb24-7'} style={} >
            < a attributes={'href': '#cb24-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' text('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tok):'
          < span attributes={'id': 'cb24-8'} style={} >
            < a attributes={'href': '#cb24-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb24-9'} style={} >
            < a attributes={'href': '#cb24-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' word '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' tok.text.split():'
          < span attributes={'id': 'cb24-10'} style={} >
            < a attributes={'href': '#cb24-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb24-11'} style={} >
            < a attributes={'href': '#cb24-11', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.line.append(('
            < span attributes={'class': 'va'} style={} >
              'self'
            '.cursor_x, word, font))'
    < p attributes={} style={} >
      'The new '
      < code attributes={} style={} >
        'line'
      ' field is essentially a buffer, where words\nare held temporarily before they can be placed. The second phase is that\nbuffer being flushed when we’re finished with a line:'
    < div attributes={'class': 'sourceCode', 'id': 'cb25', 'data-indent': '12'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb25-1'} style={} >
            < a attributes={'href': '#cb25-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.cursor_x '
            < span attributes={'class': 'op'} style={} >
              '+'
            ' w '
            < span attributes={'class': 'op'} style={} >
              '>'
            ' WIDTH '
            < span attributes={'class': 'op'} style={} >
              '-'
            ' HSTEP:'
          < span attributes={'id': 'cb25-2'} style={} >
            < a attributes={'href': '#cb25-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.flush()'
    < p attributes={} style={} >
      'As usual with buffers, we also need to make sure the buffer is\nflushed once all tokens are processed:'
    < div attributes={'class': 'sourceCode', 'id': 'cb26'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb26-1'} style={} >
            < a attributes={'href': '#cb26-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Layout:'
          < span attributes={'id': 'cb26-2'} style={} >
            < a attributes={'href': '#cb26-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tokens):'
          < span attributes={'id': 'cb26-3'} style={} >
            < a attributes={'href': '#cb26-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb26-4'} style={} >
            < a attributes={'href': '#cb26-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.flush()'
    < p attributes={} style={} >
      'This new '
      < code attributes={} style={} >
        'flush'
      ' function has three responsibilities:'
    < ol attributes={'type': '1'} style={} >
      < li attributes={} style={} >
        'It must align the words along the line;'
      < li attributes={} style={} >
        'It must add all those words to the display list; and'
      < li attributes={} style={} >
        'It must update the '
        < code attributes={} style={} >
          'cursor_x'
        ' and '
        < code attributes={} style={} >
          'cursor_y'
        '\nfields'
    < p attributes={} style={} >
      'Here’s what it looks like, step by step:'
    < iframe attributes={'class': 'widget', 'src': 'widgets/lab3-baselines.html', 'height': '204'} style={} >
    < p attributes={} style={} >
      'Since we want words to line up “on the line”, let’s start by\ncomputing where that line should be. That depends on the metrics for all\nthe fonts involved:'
    < div attributes={'class': 'sourceCode', 'id': 'cb27'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb27-1'} style={} >
            < a attributes={'href': '#cb27-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' flush('
            < span attributes={'class': 'va'} style={} >
              'self'
            '):'
          < span attributes={'id': 'cb27-2'} style={} >
            < a attributes={'href': '#cb27-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'kw'} style={} >
              'not'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.line: '
            < span attributes={'class': 'cf'} style={} >
              'return'
          < span attributes={'id': 'cb27-3'} style={} >
            < a attributes={'href': '#cb27-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    metrics '
            < span attributes={'class': 'op'} style={} >
              '='
            ' [font.metrics() '
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' x, word, font '
            < span attributes={'class': 'kw'} style={} >
              'in'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.line]'
    < p attributes={} style={} >
      'We need to locate the tallest word:'
    < div attributes={'class': 'sourceCode', 'id': 'cb28'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb28-1'} style={} >
            < a attributes={'href': '#cb28-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'max_ascent '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'bu'} style={} >
              'max'
            '([metric['
            < span attributes={'class': 'st'} style={} >
              '"ascent"'
            '] '
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' metric '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' metrics])'
    < p attributes={} style={} >
      'The line is then '
      < code attributes={} style={} >
        'max_ascent'
      ' below '
      < code attributes={} style={} >
        'self.y'
      '—or\nactually a little more to account for the leading:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Actually, 25% leading doesn’t\nadd 25% of the ascender above the ascender and 25% of the descender\nbelow the descender. Instead, it adds '
          < a attributes={'href': 'https://www.w3.org/TR/CSS2/visudet.html#leading'} style={} >
            '12.5% of the line\nheight in both places'
          ', which is subtly different when fonts are\nmixed. But let’s skip that subtlety here.'
    < div attributes={'class': 'sourceCode', 'id': 'cb29'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb29-1'} style={} >
            < a attributes={'href': '#cb29-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'baseline '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.cursor_y '
            < span attributes={'class': 'op'} style={} >
              '+'
            < span attributes={'class': 'fl'} style={} >
              '1.25'
            < span attributes={'class': 'op'} style={} >
              '*'
            ' max_ascent'
    < p attributes={} style={} >
      'Now that we know where the line is, we can place each word relative\nto that line and add it to the display list:'
    < div attributes={'class': 'sourceCode', 'id': 'cb30'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb30-1'} style={} >
            < a attributes={'href': '#cb30-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' x, word, font '
            < span attributes={'class': 'kw'} style={} >
              'in'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.line:'
          < span attributes={'id': 'cb30-2'} style={} >
            < a attributes={'href': '#cb30-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    y '
            < span attributes={'class': 'op'} style={} >
              '='
            ' baseline '
            < span attributes={'class': 'op'} style={} >
              '-'
            ' font.metrics('
            < span attributes={'class': 'st'} style={} >
              '"ascent"'
            ')'
          < span attributes={'id': 'cb30-3'} style={} >
            < a attributes={'href': '#cb30-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.display_list.append((x, y, word, font))'
    < p attributes={} style={} >
      'Note how '
      < code attributes={} style={} >
        'y'
      ' starts at the baseline, and moves '
      < em attributes={} style={} >
        'up'
      '\nby just enough to accomodate that word’s ascender.'
    < p attributes={} style={} >
      'Finally, '
      < code attributes={} style={} >
        'flush'
      ' must update the '
      < code attributes={} style={} >
        'Layout'
      '’s\n'
      < code attributes={} style={} >
        'x'
      ', '
      < code attributes={} style={} >
        'y'
      ', and '
      < code attributes={} style={} >
        'line'
      ' fields.\n'
      < code attributes={} style={} >
        'x'
      ' and '
      < code attributes={} style={} >
        'line'
      ' are easy:'
    < div attributes={'class': 'sourceCode', 'id': 'cb31'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb31-1'} style={} >
            < a attributes={'href': '#cb31-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.cursor_x '
            < span attributes={'class': 'op'} style={} >
              '='
            ' HSTEP'
          < span attributes={'id': 'cb31-2'} style={} >
            < a attributes={'href': '#cb31-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.line '
            < span attributes={'class': 'op'} style={} >
              '='
            ' []'
    < p attributes={} style={} >
      'Meanwhile, '
      < code attributes={} style={} >
        'y'
      ' must be far enough below\n'
      < code attributes={} style={} >
        'baseline'
      ' to account for the deepest descender:'
    < div attributes={'class': 'sourceCode', 'id': 'cb32'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb32-1'} style={} >
            < a attributes={'href': '#cb32-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'max_descent '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'bu'} style={} >
              'max'
            '([metric['
            < span attributes={'class': 'st'} style={} >
              '"descent"'
            '] '
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' metric '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' metrics])'
          < span attributes={'id': 'cb32-2'} style={} >
            < a attributes={'href': '#cb32-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.cursor_y '
            < span attributes={'class': 'op'} style={} >
              '='
            ' baseline '
            < span attributes={'class': 'op'} style={} >
              '+'
            < span attributes={'class': 'fl'} style={} >
              '1.25'
            < span attributes={'class': 'op'} style={} >
              '*'
            ' max_descent'
    < p attributes={} style={} >
      'Now all the text is aligned along the line, even when text sizes are\nmixed. Plus, this new '
      < code attributes={} style={} >
        'flush'
      ' function is convenient for\nother line breaking jobs. For example, in HTML the\n'
      < code attributes={} style={} >
        '<br>'
      ' tag'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Which is a self-closing tag, so there’s no\n'
          < code attributes={} style={} >
            '</br>'
          '. Many tags that '
          < em attributes={} style={} >
            'are'
          ' content, instead\nof annotating it, are like this. Some people like adding a final slash\nto self-closing tags, like '
          < code attributes={} style={} >
            '<br/>'
          ', but this is not\nrequired in HTML.'
      ' ends the current line and starts a new\none:'
    < div attributes={'class': 'sourceCode', 'id': 'cb33', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb33-1'} style={} >
            < a attributes={'href': '#cb33-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' token('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tok):'
          < span attributes={'id': 'cb33-2'} style={} >
            < a attributes={'href': '#cb33-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb33-3'} style={} >
            < a attributes={'href': '#cb33-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"br"'
            ':'
          < span attributes={'id': 'cb33-4'} style={} >
            < a attributes={'href': '#cb33-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.flush()'
    < p attributes={} style={} >
      'Likewise, paragraphs are defined by the '
      < code attributes={} style={} >
        '<p>'
      ' and\n'
      < code attributes={} style={} >
        '</p>'
      ' tags, so '
      < code attributes={} style={} >
        '</p>'
      ' also ends the\ncurrent line:'
    < div attributes={'class': 'sourceCode', 'id': 'cb34', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb34-1'} style={} >
            < a attributes={'href': '#cb34-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' token('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tok):'
          < span attributes={'id': 'cb34-2'} style={} >
            < a attributes={'href': '#cb34-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb34-3'} style={} >
            < a attributes={'href': '#cb34-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tok.tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"/p"'
            ':'
          < span attributes={'id': 'cb34-4'} style={} >
            < a attributes={'href': '#cb34-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.flush()'
          < span attributes={'id': 'cb34-5'} style={} >
            < a attributes={'href': '#cb34-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.cursor_y '
            < span attributes={'class': 'op'} style={} >
              '+='
            ' VSTEP'
    < p attributes={} style={} >
      'I add a bit extra to '
      < code attributes={} style={} >
        'cursor_y'
      ' here to create a little\ngap between paragraphs.'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'Actually, browsers support not only '
        < em attributes={} style={} >
          'horizontal'
        ' but also '
        < a attributes={'href': 'https://www.smashingmagazine.com/2019/08/writing-modes-layout/'} style={} >
          < em attributes={} style={} >
            'vertical'
          '\nwriting systems'
        ', like some traditional East Asian writing styles. A\nparticular challenge is '
        < a attributes={'href': 'https://www.w3.org/TR/mlreq/'} style={} >
          'Mongolian\nscript'
        '.'
    < h1 attributes={'id': 'faster-text-layout'} style={} >
      'Faster text layout'
    < p attributes={} style={} >
      'Now that you’ve implemented styled text, you’ve probably\nnoticed—unless you’re on macOS'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'While we can’t confirm this in the documentation, it seems\nthat the macOS “Core Text” APIs cache fonts more aggressively than Linux\nand Windows. The optimization described in this section won’t hurt any\non macOS, but also won’t improve speed as much as on Windows and\nLinux.'
      '—that on a large web page like this chapter your\nbrowser has slowed significantly from the '
      < a attributes={'href': 'graphics.html'} style={} >
        'last\nchapter'
      '. That’s because text layout, and specifically the part where\nyou measure each word, is quite slow.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'You can profile Python programs by replacing your\n'
          < code attributes={} style={} >
            'python3'
          ' command with '
          < code attributes={} style={} >
            'python3 -m cProfile'
          '. Look\nfor the lines corresponding to the '
          < code attributes={} style={} >
            'measure'
          ' and\n'
          < code attributes={} style={} >
            'metrics'
          ' calls to see how much time is spent measuring\ntext.'
    < p attributes={} style={} >
      'Unfortunately, it’s hard to make text measurement much faster. With\nproportional fonts and complex font features like hinting and kerning,\nmeasuring text can require pretty complex computations. But on a large\nweb page, some words likely appear a lot—for example, this page includes\nthe word “the” over two hundred times. Instead of measuring these words\nover and over again, we could measure them once, and then cache the\nresults. On normal English text, this usually results in a substantial\nspeedup.'
    < p attributes={} style={} >
      'Caching is such a good idea that most text libraries already\nimplement it. But because our '
      < code attributes={} style={} >
        'text'
      ' method creates a new\n'
      < code attributes={} style={} >
        'Font'
      ' object for each word, our browser isn’t taking\nadvantage of that caching. If we only made a new '
      < code attributes={} style={} >
        'Font'
      '\nobject when we had to, the built-in caches would work better and our\nbrowser would be faster. So we’ll need our own cache, so that we can\nreuse '
      < code attributes={} style={} >
        'Font'
      ' objects and have our text measurements\ncached.'
    < p attributes={} style={} >
      'We’ll store our cache in a global '
      < code attributes={} style={} >
        'FONTS'
      ' dictionary:'
    < div attributes={'class': 'sourceCode', 'id': 'cb35'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb35-1'} style={} >
            < a attributes={'href': '#cb35-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'FONTS '
            < span attributes={'class': 'op'} style={} >
              '='
            ' {}'
    < p attributes={} style={} >
      'The keys to this dictionary will be size/weight/style triples, and\nthe values will be '
      < code attributes={} style={} >
        'Font'
      ' objects. We can put the caching\nlogic itself in a new '
      < code attributes={} style={} >
        'get_font'
      ' function:'
    < div attributes={'class': 'sourceCode', 'id': 'cb36'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb36-1'} style={} >
            < a attributes={'href': '#cb36-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' get_font(size, weight, slant):'
          < span attributes={'id': 'cb36-2'} style={} >
            < a attributes={'href': '#cb36-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    key '
            < span attributes={'class': 'op'} style={} >
              '='
            ' (size, weight, slant)'
          < span attributes={'id': 'cb36-3'} style={} >
            < a attributes={'href': '#cb36-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' key '
            < span attributes={'class': 'kw'} style={} >
              'not'
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' FONTS:'
          < span attributes={'id': 'cb36-4'} style={} >
            < a attributes={'href': '#cb36-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        font '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tkinter.font.Font(size'
            < span attributes={'class': 'op'} style={} >
              '='
            'size, weight'
            < span attributes={'class': 'op'} style={} >
              '='
            'weight, slant'
            < span attributes={'class': 'op'} style={} >
              '='
            'slant)'
          < span attributes={'id': 'cb36-5'} style={} >
            < a attributes={'href': '#cb36-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        FONTS[key] '
            < span attributes={'class': 'op'} style={} >
              '='
            ' font'
          < span attributes={'id': 'cb36-6'} style={} >
            < a attributes={'href': '#cb36-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'return'
            ' FONTS[key]'
    < p attributes={} style={} >
      'Now, inside the '
      < code attributes={} style={} >
        'text'
      ' method we can call\n'
      < code attributes={} style={} >
        'get_font'
      ' instead of creating a '
      < code attributes={} style={} >
        'Font'
      ' object\ndirectly:'
    < div attributes={'class': 'sourceCode', 'id': 'cb37'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb37-1'} style={} >
            < a attributes={'href': '#cb37-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Layout:'
          < span attributes={'id': 'cb37-2'} style={} >
            < a attributes={'href': '#cb37-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' text('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tok):'
          < span attributes={'id': 'cb37-3'} style={} >
            < a attributes={'href': '#cb37-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        font '
            < span attributes={'class': 'op'} style={} >
              '='
            ' get_font('
            < span attributes={'class': 'va'} style={} >
              'self'
            '.size, '
            < span attributes={'class': 'va'} style={} >
              'self'
            '.weight, '
            < span attributes={'class': 'va'} style={} >
              'self'
            '.style)'
          < span attributes={'id': 'cb37-4'} style={} >
            < a attributes={'href': '#cb37-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'Fonts for scripts like Chinese can be megabytes in size, so they are\ngenerally stored on disk and only loaded into memory on-demand. That\nmakes font loading slow. Browsers also have extensive caches for\nmeasuring, shaping, and rendering text. Because web pages have a lot of\ntext, these caches turn out to be one of the most important parts of\nspeeding up rendering.'
    < h1 attributes={'id': 'summary'} style={} >
      'Summary'
    < p attributes={} style={} >
      'The last chapter introduced a browser that laid out Chinese text. Now\nit does English, too:'
    < ul attributes={} style={} >
      < li attributes={} style={} >
        'Text is laid out word-by-word'
      < li attributes={} style={} >
        'Lines are split at word boundaries'
      < li attributes={} style={} >
        'Text can be bold or italic'
      < li attributes={} style={} >
        'Text of different sizes can be mixed'
    < p attributes={} style={} >
      'You can now use your browser to read an essay, a blog post, or a\nbook!'
    < div attributes={'id': 'signup'} style={} >
      < iframe attributes={'src': 'https://browserbook.substack.com/embed', 'width': '350', 'height': '180', 'frameborder': '0', 'scrolling': 'no'} style={} >
      < a attributes={'href': '#', 'id': 'signup-close'} style={} >
        'Close'
    < h1 attributes={'id': 'outline'} style={} >
      'Outline'
    < p attributes={} style={} >
      'The complete set of functions, classes, and methods in our browser\nshould look something like this:'
    < div attributes={'class': 'cm', 'python': '', 'outline"': ''} style={} >
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'def'
        ' request(url)\n'
      < code attributes={'class': 'line'} style={} >
        'WIDTH\n'
      < code attributes={'class': 'line'} style={} >
        'HEIGHT\n'
      < code attributes={'class': 'line'} style={} >
        'HSTEP\n'
      < code attributes={'class': 'line'} style={} >
        'VSTEP\n'
      < code attributes={'class': 'line'} style={} >
        'SCROLL_STEP\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' Text:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__(text)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __repr__()\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' Tag:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__(tag)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __repr__()\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'def'
        ' lex(body)\n'
      < code attributes={'class': 'line'} style={} >
        'FONTS\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'def'
        ' get_font(size, weight, slant)\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' Layout:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__(tokens)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' token(tok)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' text(tok)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' flush()\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' Browser:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__()\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' load(url)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' draw()\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' scrolldown(e)\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'cf'} style={} >
          'if'
        ' __name__ '
        < span attributes={'class': 'op'} style={} >
          '=='
        < span attributes={'class': 'st'} style={} >
          '"__main__"'
    < h1 attributes={'id': 'exercises'} style={} >
      'Exercises'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Centered Text:'
      ' This book’s page titles are centered: find\nthem between '
      < code attributes={} style={} >
        '<h1 class="title">'
      ' and\n'
      < code attributes={} style={} >
        '</h1>'
      '. Make your browser center the text in these\ntitles. Each line has to be centered individually, because different\nlines will have different lengths.'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Superscripts:'
      ' Add support for the '
      < code attributes={} style={} >
        '<sup>'
      '\ntag: text in this tag should be smaller (perhaps half the normal text\nsize) and be placed so that the top of a superscript lines up with the\ntop of a normal letter.'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Soft hyphens:'
      ' The soft hyphen character, written\n'
      < code attributes={} style={} >
        '\\N{soft hyphen}'
      ' in Python, represents a place where the\ntext renderer can, but doesn’t have to, insert a hyphen and break the\nword across lines. Add support for it.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'If you’ve done a '
          < a attributes={'href': 'http.html#exercises'} style={} >
            'previous\nexercise'
          ' on HTML entities, you might also want to add support for\nthe '
          < code attributes={} style={} >
            '&shy;'
          ' entity, which expands to a soft\nhyphen.'
      ' If a word doesn’t fit at the end of a line, check\nif it has soft hyphens, and if so break the word across lines. Remember\nthat a word can have multiple soft hyphens in it, and make sure to draw\na hyphen when you break a word. The word\n“super\xadcala\xadfraga\xadlistic\xadexpi\xadala\xaddo\xadshus” is a good test case.'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Small caps:'
      ' Make the '
      < code attributes={} style={} >
        '<abbr>'
      ' element\nrender text in small caps, '
      < abbr attributes={} style={} >
        'like this'
      '. Inside an\n'
      < code attributes={} style={} >
        '<abbr>'
      ' tag, lower-case letters should be small,\ncapitalized, and bold, while all other characters (upper case, numbers,\netc) should be drawn in the normal font.'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Preformatted text:'
      ' Add support for the\n'
      < code attributes={} style={} >
        '<pre>'
      ' tag. Unlike normal paragraphs, text inside\n'
      < code attributes={} style={} >
        '<pre>'
      ' tags doesn’t automatically break lines, and\nwhitespace like spaces and newlines are preserved. Use a fixed-width\nfont like '
      < code attributes={} style={} >
        'Courier New'
      ' or '
      < code attributes={} style={} >
        'SFMono'
      ' as well. Make\nsure tags work normally inside '
      < code attributes={} style={} >
        '<pre>'
      ' tags: it should\nbe possible to bold some text inside a '
      < code attributes={} style={} >
        '<pre>'
      '.'
    < nav attributes={'class': 'links'} style={} >
      '\n  Chapter 3 of '
      < a attributes={'href': 'index.html', 'title': 'Tabl', 'of': '', 'contents"': ''} style={} >
        'Web Browser Engineering'
      '.\n  '
      < a attributes={'rel': 'prev', 'title': 'Previou', 'chapter"': '', 'href': 'graphics.html'} style={} >
        '<'
      < a attributes={'rel': 'next', 'title': 'Nex', 'chapter"': '', 'href': 'html.html'} style={} >
        '>'
    < p attributes={} style={} >
      'Did you find this chapter useful? '
      < button attributes={'id': 'feedback-button'} style={} >
        'Send us feedback!'
    < footer attributes={} style={} >
      '\n  © 2018–2023 '
      < a attributes={'href': 'https://pavpanchekha.com'} style={} >
        'Pavel Panchekha'
      ' & '
      < a attributes={'href': 'https://twitter.com/chrishtr'} style={} >
        'Chris Harrelson'
    < script attributes={'type': 'text/javascript', 'src': 'feedback.js'} style={} >
    < script attributes={'type': 'text/javascript', 'src': 'book.js'} style={} >

2023-05-28 09:08:34.706 | DEBUG    | browser_html.html_parser:parse:45 - 
< html attributes={'lang': 'en-US', 'xml:lang': 'en-US'} style={} >
  < head attributes={} style={} >
    < meta attributes={'charset': 'utf-8', '/': ''} style={} >
    < meta attributes={'name': 'color-scheme', 'content': 'dar', 'light"': ''} style={} >
    < meta attributes={'name': 'generator', 'content': 'pandoc', '/': ''} style={} >
    < meta attributes={'name': 'viewport', 'content': 'width=device-width,initial-scale=1.0,user-scalable=yes', '/': ''} style={} >
    < link attributes={'rel': 'prev', 'href': 'text.html', '/': ''} style={} >
    < link attributes={'rel': 'next', 'href': 'layout.html', '/': ''} style={} >
    < link attributes={'rel': 'stylesheet', 'href': 'book.css', '/': ''} style={} >
    < link attributes={'rel': 'stylesheet', 'href': 'https://fonts.googleapis.com/css?family=Vollkorn%7CLora&display=swap', '/': ''} style={} >
    < link attributes={'rel': 'stylesheet', 'href': 'https://fonts.googleapis.com/css?family=Vollkorn:400i%7CLora:400i&display=swap', '/': ''} style={} >
    < link attributes={'rel': 'alternate', 'type': 'application/rss+xml', 'href': 'rss.xml', 'title': 'We', 'browser': '', 'engineering"': ''} style={} >
    < title attributes={} style={} >
      'Constructing a Document Tree | Web Browser Engineering'
  < body attributes={} style={} >
    < header attributes={} style={} >
      < h1 attributes={'class': 'title'} style={} >
        'Constructing a Document Tree'
      < a attributes={'href': 'https://twitter.com/browserbook'} style={} >
        'Twitter'
      ' ·\n'
      < a attributes={'href': 'https://browserbook.substack.com/'} style={} >
        'Blog'
      ' ·\n'
      < a attributes={'href': 'https://patreon.com/browserengineering'} style={} >
        'Patreon'
      ' ·\n'
      < a attributes={'href': 'https://github.com/browserengineering/book/discussions'} style={} >
        'Discussions'
    < nav attributes={'class': 'links'} style={} >
      '\n  Chapter 4 of '
      < a attributes={'href': 'index.html', 'title': 'Tabl', 'of': '', 'contents"': ''} style={} >
        'Web Browser Engineering'
      '.\n  '
      < a attributes={'rel': 'prev', 'title': 'Previou', 'chapter"': '', 'href': 'text.html'} style={} >
        '<'
      < a attributes={'rel': 'next', 'title': 'Nex', 'chapter"': '', 'href': 'layout.html'} style={} >
        '>'
    < nav attributes={'id': 'toc'} style={} >
      < ul attributes={} style={} >
        < li attributes={} style={} >
          < a attributes={'href': '#a-tree-of-nodes', 'id': 'toc-a-tree-of-nodes'} style={} >
            'A tree of\nnodes'
        < li attributes={} style={} >
          < a attributes={'href': '#constructing-the-tree', 'id': 'toc-constructing-the-tree'} style={} >
            'Constructing the tree'
        < li attributes={} style={} >
          < a attributes={'href': '#debugging-a-parser', 'id': 'toc-debugging-a-parser'} style={} >
            'Debugging\na parser'
        < li attributes={} style={} >
          < a attributes={'href': '#self-closing-tags', 'id': 'toc-self-closing-tags'} style={} >
            'Self-closing\ntags'
        < li attributes={} style={} >
          < a attributes={'href': '#using-the-node-tree', 'id': 'toc-using-the-node-tree'} style={} >
            'Using\nthe node tree'
        < li attributes={} style={} >
          < a attributes={'href': '#handling-author-errors', 'id': 'toc-handling-author-errors'} style={} >
            'Handling author errors'
        < li attributes={} style={} >
          < a attributes={'href': '#summary', 'id': 'toc-summary'} style={} >
            'Summary'
        < li attributes={} style={} >
          < a attributes={'href': '#outline', 'id': 'toc-outline'} style={} >
            'Outline'
        < li attributes={} style={} >
          < a attributes={'href': '#exercises', 'id': 'toc-exercises'} style={} >
            'Exercises'
    < p attributes={} style={} >
      'So far, your web browser sees web pages as a stream of open tags,\nclose tags, and text. But HTML is actually a tree, and though the tree\nstructure hasn’t been important yet, it will be once backgrounds,\nmargins, and CSS enter the picture. So this chapter adds a proper HTML\nparser and converts the layout engine to use it.'
    < h1 attributes={'id': 'a-tree-of-nodes'} style={} >
      'A tree of nodes'
    < p attributes={} style={} >
      'The HTML tree'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'This is\nthe tree that is usually called the DOM tree, for '
          < a attributes={'href': 'https://en.wikipedia.org/wiki/Document_Object_Model'} style={} >
            'Document\nObject Model'
          '. We’ll keep calling it the HTML tree for\nnow.'
      ' has one node for each open and close tag pair and for\neach span of text.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'In\nreality there are other types of nodes too, like comments, doctypes, and\n'
          < code attributes={} style={} >
            'CDATA'
          ' sections, and processing instructions. There are even\nsome deprecated types!'
      ' So for our browser to be a tree,\ntokens need to evolve into nodes. That means adding a list of children\nand a parent pointer to each one. Here’s the new '
      < code attributes={} style={} >
        'Text'
      '\nclass:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'The\n'
          < code attributes={} style={} >
            'children'
          ' field of a '
          < code attributes={} style={} >
            'Text'
          ' node will always be\nempty; I’m defining it here to make it easier to write code that handles\n'
          < code attributes={} style={} >
            'Text'
          ' and '
          < code attributes={} style={} >
            'Element'
          ' nodes\nsimultaneously.'
    < div attributes={'class': 'sourceCode', 'id': 'cb1'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb1-1'} style={} >
            < a attributes={'href': '#cb1-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Text:'
          < span attributes={'id': 'cb1-2'} style={} >
            < a attributes={'href': '#cb1-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', text, parent):'
          < span attributes={'id': 'cb1-3'} style={} >
            < a attributes={'href': '#cb1-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.text '
            < span attributes={'class': 'op'} style={} >
              '='
            ' text'
          < span attributes={'id': 'cb1-4'} style={} >
            < a attributes={'href': '#cb1-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.children '
            < span attributes={'class': 'op'} style={} >
              '='
            ' []'
          < span attributes={'id': 'cb1-5'} style={} >
            < a attributes={'href': '#cb1-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.parent '
            < span attributes={'class': 'op'} style={} >
              '='
            ' parent'
    < p attributes={} style={} >
      'Since it takes two tags (the open and the close tag) to make a node,\nlet’s rename the '
      < code attributes={} style={} >
        'Tag'
      ' class to '
      < code attributes={} style={} >
        'Element'
      ', and\nmake it look like this:'
    < div attributes={'class': 'sourceCode', 'id': 'cb2', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb2-1'} style={} >
            < a attributes={'href': '#cb2-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Element:'
          < span attributes={'id': 'cb2-2'} style={} >
            < a attributes={'href': '#cb2-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag, parent):'
          < span attributes={'id': 'cb2-3'} style={} >
            < a attributes={'href': '#cb2-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.tag '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tag'
          < span attributes={'id': 'cb2-4'} style={} >
            < a attributes={'href': '#cb2-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.children '
            < span attributes={'class': 'op'} style={} >
              '='
            ' []'
          < span attributes={'id': 'cb2-5'} style={} >
            < a attributes={'href': '#cb2-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.parent '
            < span attributes={'class': 'op'} style={} >
              '='
            ' parent'
    < p attributes={} style={} >
      'I added a '
      < code attributes={} style={} >
        'children'
      ' field to both '
      < code attributes={} style={} >
        'Text'
      ' and\n'
      < code attributes={} style={} >
        'Element'
      ', even though text nodes never have children. That’s\nfor consistency, to avoid '
      < code attributes={} style={} >
        'isinstance'
      ' calls throughout the\ncode.'
    < p attributes={} style={} >
      'Constructing a tree of nodes from source code is called parsing. A\nparser builds a tree one element or text node at a time. But that means\nthe parser needs to store an '
      < em attributes={} style={} >
        'incomplete'
      ' tree. For example,\nsuppose the parser has so far read this bit of HTML:'
    < pre attributes={} style={} >
      < code attributes={} style={} >
        '<html><head></head><body><h1>This is my webpage'
    < p attributes={} style={} >
      'The parser has seen five tags (and one text node). The rest of the\nHTML will contain more open tags, close tags, and text; but no matter\nwhich tokens it sees, no new nodes will be added to the\n'
      < code attributes={} style={} >
        '<head>'
      ' tag, which has already been closed. So that\nnode is “finished”. But the other nodes are unfinished: more children\ncan be added to the '
      < code attributes={} style={} >
        '<html>'
      ',\n'
      < code attributes={} style={} >
        '<body>'
      ', and '
      < code attributes={} style={} >
        '<h1>'
      ' nodes, depending\non what HTML comes next.'
    < p attributes={} style={} >
      'Since the parser reads the HTML file from left to right, these\nunfinished tags are always in a certain part of the tree. The unfinished\ntags have always been '
      < em attributes={} style={} >
        'opened'
      ' but not yet closed; they are\nalways '
      < em attributes={} style={} >
        'to the right'
      ' of the finished nodes; and they are always\n'
      < em attributes={} style={} >
        'children of other unfinished tags'
      '. To leverage these facts,\nlet’s represent an incomplete tree by storing a list of unfinished tags,\nordered with parents before children. The first node in the list is the\nroot of the HTML tree; the last node in the list is the most recent\nunfinished tag.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'In\nPython, and most other languages, it’s faster to add and remove from the\nend of a list, instead of the beginning.'
    < p attributes={} style={} >
      'Parsing is a little more complex than '
      < code attributes={} style={} >
        'lex'
      ', so we’re\ngoing to want to break it into several functions, organized in a new\n'
      < code attributes={} style={} >
        'HTMLParser'
      ' class. That class can also store the source code\nit’s analyzing and the incomplete tree:'
    < div attributes={'class': 'sourceCode', 'id': 'cb4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb4-1'} style={} >
            < a attributes={'href': '#cb4-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb4-2'} style={} >
            < a attributes={'href': '#cb4-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', body):'
          < span attributes={'id': 'cb4-3'} style={} >
            < a attributes={'href': '#cb4-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.body '
            < span attributes={'class': 'op'} style={} >
              '='
            ' body'
          < span attributes={'id': 'cb4-4'} style={} >
            < a attributes={'href': '#cb4-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished '
            < span attributes={'class': 'op'} style={} >
              '='
            ' []'
    < p attributes={} style={} >
      'Before the parser starts, it hasn’t seen any tags at all, so the\n'
      < code attributes={} style={} >
        'unfinished'
      ' list storing the tree starts empty. But as the\nparser reads tokens, that list fills up. Let’s start that by renaming\nthe '
      < code attributes={} style={} >
        'lex'
      ' function we have now, aspirationally, to\n'
      < code attributes={} style={} >
        'parse'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb5'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb5-1'} style={} >
            < a attributes={'href': '#cb5-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb5-2'} style={} >
            < a attributes={'href': '#cb5-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' parse('
            < span attributes={'class': 'va'} style={} >
              'self'
            '):'
          < span attributes={'id': 'cb5-3'} style={} >
            < a attributes={'href': '#cb5-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'We’ll need to do a bit of surgery on '
      < code attributes={} style={} >
        'parse'
      '. Right now\n'
      < code attributes={} style={} >
        'parse'
      ' creates '
      < code attributes={} style={} >
        'Tag'
      ' and '
      < code attributes={} style={} >
        'Text'
      '\nobjects and appends them to the '
      < code attributes={} style={} >
        'out'
      ' array. We need it to\ncreate '
      < code attributes={} style={} >
        'Element'
      ' and '
      < code attributes={} style={} >
        'Text'
      ' objects and add them\nto the '
      < code attributes={} style={} >
        'unfinished'
      ' tree. Since a tree is a bit more complex\nthan a list, I’ll move the adding-to-a-tree logic to two new methods\n'
      < code attributes={} style={} >
        'add_text'
      ' and '
      < code attributes={} style={} >
        'add_tag'
      '.'
    < div attributes={'class': 'sourceCode', 'id': 'cb6', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb6-1'} style={} >
            < a attributes={'href': '#cb6-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' parse('
            < span attributes={'class': 'va'} style={} >
              'self'
            '):'
          < span attributes={'id': 'cb6-2'} style={} >
            < a attributes={'href': '#cb6-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    text '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '""'
          < span attributes={'id': 'cb6-3'} style={} >
            < a attributes={'href': '#cb6-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    in_tag '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'False'
          < span attributes={'id': 'cb6-4'} style={} >
            < a attributes={'href': '#cb6-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' c '
            < span attributes={'class': 'kw'} style={} >
              'in'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.body:'
          < span attributes={'id': 'cb6-5'} style={} >
            < a attributes={'href': '#cb6-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' c '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"<"'
            ':'
          < span attributes={'id': 'cb6-6'} style={} >
            < a attributes={'href': '#cb6-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            in_tag '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'True'
          < span attributes={'id': 'cb6-7'} style={} >
            < a attributes={'href': '#cb6-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' text: '
            < span attributes={'class': 'va'} style={} >
              'self'
            '.add_text(text)'
          < span attributes={'id': 'cb6-8'} style={} >
            < a attributes={'href': '#cb6-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            text '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '""'
          < span attributes={'id': 'cb6-9'} style={} >
            < a attributes={'href': '#cb6-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' c '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '">"'
            ':'
          < span attributes={'id': 'cb6-10'} style={} >
            < a attributes={'href': '#cb6-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            in_tag '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'False'
          < span attributes={'id': 'cb6-11'} style={} >
            < a attributes={'href': '#cb6-11', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.add_tag(text)'
          < span attributes={'id': 'cb6-12'} style={} >
            < a attributes={'href': '#cb6-12', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            text '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '""'
          < span attributes={'id': 'cb6-13'} style={} >
            < a attributes={'href': '#cb6-13', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb6-14'} style={} >
            < a attributes={'href': '#cb6-14', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            text '
            < span attributes={'class': 'op'} style={} >
              '+='
            ' c'
          < span attributes={'id': 'cb6-15'} style={} >
            < a attributes={'href': '#cb6-15', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'kw'} style={} >
              'not'
            ' in_tag '
            < span attributes={'class': 'kw'} style={} >
              'and'
            ' text:'
          < span attributes={'id': 'cb6-16'} style={} >
            < a attributes={'href': '#cb6-16', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.add_text(text)'
          < span attributes={'id': 'cb6-17'} style={} >
            < a attributes={'href': '#cb6-17', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'return'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.finish()'
    < p attributes={} style={} >
      'The '
      < code attributes={} style={} >
        'out'
      ' variable is gone, and note that I’ve also moved\nthe return value to a new '
      < code attributes={} style={} >
        'finish'
      ' method, which converts the\nincomplete tree to the final, complete tree. So: how do we add things to\nthe tree?'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'HTML derives from a long line of document processing systems. Its\npredecessor, '
        < a attributes={'href': 'https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language'} style={} >
          'SGML'
        ',\ntraces back to '
        < a attributes={'href': 'https://en.wikipedia.org/wiki/TYPSET_and_RUNOFF'} style={} >
          'RUNOFF'
        ' and is\na sibling to '
        < a attributes={'href': 'https://troff.org'} style={} >
          'troff'
        ', now used for Linux\nman pages. The '
        < a attributes={'href': 'https://www.iso.org/committee/45374.html'} style={} >
          'committee'
        ' that\nstandardized SGML now works on the '
        < code attributes={} style={} >
          '.odf'
        ',\n'
        < code attributes={} style={} >
          '.docx'
        ', and '
        < code attributes={} style={} >
          '.epub'
        ' formats.'
    < h1 attributes={'id': 'constructing-the-tree'} style={} >
      'Constructing the tree'
    < p attributes={} style={} >
      'Let’s talk about adding nodes to a tree. To add a text node we add it\nas a child of the last unfinished node:'
    < div attributes={'class': 'sourceCode', 'id': 'cb7'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb7-1'} style={} >
            < a attributes={'href': '#cb7-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb7-2'} style={} >
            < a attributes={'href': '#cb7-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_text('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', text):'
          < span attributes={'id': 'cb7-3'} style={} >
            < a attributes={'href': '#cb7-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parent '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished['
            < span attributes={'class': 'op'} style={} >
              '-'
            < span attributes={'class': 'dv'} style={} >
              '1'
            ']'
          < span attributes={'id': 'cb7-4'} style={} >
            < a attributes={'href': '#cb7-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        node '
            < span attributes={'class': 'op'} style={} >
              '='
            ' Text(text, parent)'
          < span attributes={'id': 'cb7-5'} style={} >
            < a attributes={'href': '#cb7-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parent.children.append(node)'
    < p attributes={} style={} >
      'On the other hand, tags are a little more complex since they might be\nan open '
      < em attributes={} style={} >
        'or'
      ' a close tag:'
    < div attributes={'class': 'sourceCode', 'id': 'cb8'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb8-1'} style={} >
            < a attributes={'href': '#cb8-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb8-2'} style={} >
            < a attributes={'href': '#cb8-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb8-3'} style={} >
            < a attributes={'href': '#cb8-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' tag.startswith('
            < span attributes={'class': 'st'} style={} >
              '"/"'
            '):'
          < span attributes={'id': 'cb8-4'} style={} >
            < a attributes={'href': '#cb8-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb8-5'} style={} >
            < a attributes={'href': '#cb8-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb8-6'} style={} >
            < a attributes={'href': '#cb8-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'A close tag removes an unfinished node, by finishing it, and add it\nto the next unfinished node in the list:'
    < div attributes={'class': 'sourceCode', 'id': 'cb9', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb9-1'} style={} >
            < a attributes={'href': '#cb9-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb9-2'} style={} >
            < a attributes={'href': '#cb9-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' tag.startswith('
            < span attributes={'class': 'st'} style={} >
              '"/"'
            '):'
          < span attributes={'id': 'cb9-3'} style={} >
            < a attributes={'href': '#cb9-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        node '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished.pop()'
          < span attributes={'id': 'cb9-4'} style={} >
            < a attributes={'href': '#cb9-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parent '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished['
            < span attributes={'class': 'op'} style={} >
              '-'
            < span attributes={'class': 'dv'} style={} >
              '1'
            ']'
          < span attributes={'id': 'cb9-5'} style={} >
            < a attributes={'href': '#cb9-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parent.children.append(node)'
          < span attributes={'id': 'cb9-6'} style={} >
            < a attributes={'href': '#cb9-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'An open tag instead adds an unfinished node to the end of the\nlist:'
    < div attributes={'class': 'sourceCode', 'id': 'cb10', 'data-indent': '4', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb10-1'} style={} >
            < a attributes={'href': '#cb10-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb10-2'} style={} >
            < a attributes={'href': '#cb10-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb10-3'} style={} >
            < a attributes={'href': '#cb10-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb10-4'} style={} >
            < a attributes={'href': '#cb10-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parent '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished['
            < span attributes={'class': 'op'} style={} >
              '-'
            < span attributes={'class': 'dv'} style={} >
              '1'
            ']'
          < span attributes={'id': 'cb10-5'} style={} >
            < a attributes={'href': '#cb10-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        node '
            < span attributes={'class': 'op'} style={} >
              '='
            ' Element(tag, parent)'
          < span attributes={'id': 'cb10-6'} style={} >
            < a attributes={'href': '#cb10-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished.append(node)'
    < p attributes={} style={} >
      'Once the parser is done, it turns our incomplete tree into a complete\ntree by just finishing any unfinished nodes:'
    < div attributes={'class': 'sourceCode', 'id': 'cb11'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb11-1'} style={} >
            < a attributes={'href': '#cb11-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb11-2'} style={} >
            < a attributes={'href': '#cb11-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' finish('
            < span attributes={'class': 'va'} style={} >
              'self'
            '):'
          < span attributes={'id': 'cb11-3'} style={} >
            < a attributes={'href': '#cb11-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'bu'} style={} >
              'len'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished) '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'dv'} style={} >
              '0'
            ':'
          < span attributes={'id': 'cb11-4'} style={} >
            < a attributes={'href': '#cb11-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.add_tag('
            < span attributes={'class': 'st'} style={} >
              '"html"'
            ')'
          < span attributes={'id': 'cb11-5'} style={} >
            < a attributes={'href': '#cb11-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'while'
            < span attributes={'class': 'bu'} style={} >
              'len'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished) '
            < span attributes={'class': 'op'} style={} >
              '>'
            < span attributes={'class': 'dv'} style={} >
              '1'
            ':'
          < span attributes={'id': 'cb11-6'} style={} >
            < a attributes={'href': '#cb11-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            node '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished.pop()'
          < span attributes={'id': 'cb11-7'} style={} >
            < a attributes={'href': '#cb11-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            parent '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished['
            < span attributes={'class': 'op'} style={} >
              '-'
            < span attributes={'class': 'dv'} style={} >
              '1'
            ']'
          < span attributes={'id': 'cb11-8'} style={} >
            < a attributes={'href': '#cb11-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            parent.children.append(node)'
          < span attributes={'id': 'cb11-9'} style={} >
            < a attributes={'href': '#cb11-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'return'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished.pop()'
    < p attributes={} style={} >
      'This is '
      < em attributes={} style={} >
        'almost'
      ' a complete parser, but it doesn’t quite work\nat the beginning and end of the document. The very first open tag is an\nedge case without a parent:'
    < div attributes={'class': 'sourceCode', 'id': 'cb12', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb12-1'} style={} >
            < a attributes={'href': '#cb12-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb12-2'} style={} >
            < a attributes={'href': '#cb12-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb12-3'} style={} >
            < a attributes={'href': '#cb12-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb12-4'} style={} >
            < a attributes={'href': '#cb12-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parent '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished['
            < span attributes={'class': 'op'} style={} >
              '-'
            < span attributes={'class': 'dv'} style={} >
              '1'
            '] '
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished '
            < span attributes={'class': 'cf'} style={} >
              'else'
            < span attributes={'class': 'va'} style={} >
              'None'
          < span attributes={'id': 'cb12-5'} style={} >
            < a attributes={'href': '#cb12-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'The very last tag is also an edge case, because there’s no unfinished\nnode to add it to:'
    < div attributes={'class': 'sourceCode', 'id': 'cb13', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb13-1'} style={} >
            < a attributes={'href': '#cb13-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb13-2'} style={} >
            < a attributes={'href': '#cb13-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' tag.startswith('
            < span attributes={'class': 'st'} style={} >
              '"/"'
            '):'
          < span attributes={'id': 'cb13-3'} style={} >
            < a attributes={'href': '#cb13-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'bu'} style={} >
              'len'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished) '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'dv'} style={} >
              '1'
            ': '
            < span attributes={'class': 'cf'} style={} >
              'return'
          < span attributes={'id': 'cb13-4'} style={} >
            < a attributes={'href': '#cb13-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'Ok, that’s all done. Let’s test our parser out and see how well it\nworks!'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'The ill-considered Javascript '
        < code attributes={} style={} >
          'document.write'
        ' method\nallows Javascript to modify the HTML source code while it’s being\nparsed! Modern browsers use '
        < a attributes={'href': 'https://developer.mozilla.org/en-US/docs/Glossary/speculative_parsing'} style={} >
          'speculative'
        '\nparsing to make this fast and avoid evaluating Javascript while\nparsing.'
    < h1 attributes={'id': 'debugging-a-parser'} style={} >
      'Debugging a parser'
    < p attributes={} style={} >
      'How do we know our parser does the right thing—that it builds the\nright tree? Well the place to start is '
      < em attributes={} style={} >
        'seeing'
      ' the tree it\nproduces. We can do that with a quick, recursive pretty-printer:'
    < div attributes={'class': 'sourceCode', 'id': 'cb14'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb14-1'} style={} >
            < a attributes={'href': '#cb14-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' print_tree(node, indent'
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'dv'} style={} >
              '0'
            '):'
          < span attributes={'id': 'cb14-2'} style={} >
            < a attributes={'href': '#cb14-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'bu'} style={} >
              'print'
            '('
            < span attributes={'class': 'st'} style={} >
              '" "'
            < span attributes={'class': 'op'} style={} >
              '*'
            ' indent, node)'
          < span attributes={'id': 'cb14-3'} style={} >
            < a attributes={'href': '#cb14-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' child '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' node.children:'
          < span attributes={'id': 'cb14-4'} style={} >
            < a attributes={'href': '#cb14-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        print_tree(child, indent '
            < span attributes={'class': 'op'} style={} >
              '+'
            < span attributes={'class': 'dv'} style={} >
              '2'
            ')'
    < p attributes={} style={} >
      'Here we’re printing each node in the tree, and using indentation to\nshow the tree structure. Since we need to print each node, it’s worth\ntaking the time to give them a nice printed form, which in Python means\ndefining the '
      < code attributes={} style={} >
        '__repr__'
      ' function:'
    < div attributes={'class': 'sourceCode', 'id': 'cb15', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb15-1'} style={} >
            < a attributes={'href': '#cb15-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Text:'
          < span attributes={'id': 'cb15-2'} style={} >
            < a attributes={'href': '#cb15-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__repr__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            '):'
          < span attributes={'id': 'cb15-3'} style={} >
            < a attributes={'href': '#cb15-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'return'
            < span attributes={'class': 'bu'} style={} >
              'repr'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            '.text)'
          < span attributes={'id': 'cb15-4'} style={} >
            < a attributes={'href': '#cb15-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
          < span attributes={'id': 'cb15-5'} style={} >
            < a attributes={'href': '#cb15-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Element:'
          < span attributes={'id': 'cb15-6'} style={} >
            < a attributes={'href': '#cb15-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__repr__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            '):'
          < span attributes={'id': 'cb15-7'} style={} >
            < a attributes={'href': '#cb15-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'return'
            < span attributes={'class': 'st'} style={} >
              '"<"'
            < span attributes={'class': 'op'} style={} >
              '+'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.tag '
            < span attributes={'class': 'op'} style={} >
              '+'
            < span attributes={'class': 'st'} style={} >
              '">"'
    < p attributes={} style={} >
      'Try this out on this web page, parsing the HTML source code and then\ncalling '
      < code attributes={} style={} >
        'print_tree'
      ' to visualize it:'
    < div attributes={'class': 'sourceCode', 'id': 'cb16', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb16-1'} style={} >
            < a attributes={'href': '#cb16-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'headers, body '
            < span attributes={'class': 'op'} style={} >
              '='
            ' request(sys.argv['
            < span attributes={'class': 'dv'} style={} >
              '1'
            '])'
          < span attributes={'id': 'cb16-2'} style={} >
            < a attributes={'href': '#cb16-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'nodes '
            < span attributes={'class': 'op'} style={} >
              '='
            ' HTMLParser(body).parse()'
          < span attributes={'id': 'cb16-3'} style={} >
            < a attributes={'href': '#cb16-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'print_tree(nodes)'
    < p attributes={} style={} >
      'Run it on this web page, and you’ll see something like this:'
    < pre attributes={'class': 'example'} style={} >
      < code attributes={} style={} >
        ' <!doctype html>\n   \'\\n\'\n   <html lang="en-US" xml:lang="en-US">\n     \'\\n\'\n     <head>\n       \'\\n  \'\n       <meta charset="utf-8" />\n         \'\\n  \'\n         <meta name="generator" content="pandoc" />\n           \'\\n  \''
    < p attributes={} style={} >
      'Immediately a couple of things stand out. Let’s start at the top,\nwith the '
      < code attributes={} style={} >
        '<!doctype html>'
      ' tag.'
    < p attributes={} style={} >
      'This special tag, called a '
      < a attributes={'href': 'https://html.spec.whatwg.org/multipage/syntax.html#the-doctype'} style={} >
        'doctype'
      ',\nis always the very first thing in an HTML document. But it’s not really\nan element at all, nor is it supposed to have a close tag. Our toy\nbrowser won’t be using the doctype for anything, so it’s best to throw\nit away:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Real browsers\nuse doctypes to switch between standards-compliant and legacy parsing\nand layout modes.'
    < div attributes={'class': 'sourceCode', 'id': 'cb18', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb18-1'} style={} >
            < a attributes={'href': '#cb18-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb18-2'} style={} >
            < a attributes={'href': '#cb18-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' tag.startswith('
            < span attributes={'class': 'st'} style={} >
              '"!"'
            '): '
            < span attributes={'class': 'cf'} style={} >
              'return'
          < span attributes={'id': 'cb18-3'} style={} >
            < a attributes={'href': '#cb18-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'This ignores all tags that start with an exclamation mark, which not\nonly throws out doctype declarations but also most comments, which in\nHTML are written '
      < code attributes={} style={} >
        '<!-- comment text -->'
      '.'
    < p attributes={} style={} >
      'Just throwing out doctypes isn’t quite enough though—if you run your\nparser now, it will crash. That’s because after the doctype comes a\nnewline, which our parser treats as text and tries to insert into the\ntree. Except there isn’t a tree, since the parser hasn’t seen any open\ntags. For simplicity, let’s just have our browser skip whitespace-only\ntext nodes to side-step the problem:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Real browsers retain whitespace to correctly render\n'
          < code attributes={} style={} >
            'make<span></span>up'
          ' as one word and\n'
          < code attributes={} style={} >
            'make<span> </span>up'
          ' as two. Our browser won’t.\nPlus, ignoring whitespace simplifies '
          < a attributes={'href': 'layout.html'} style={} >
            'later\nchapters'
          ' by avoiding a special-case for whitespace-only text\ntags.'
    < div attributes={'class': 'sourceCode', 'id': 'cb19', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb19-1'} style={} >
            < a attributes={'href': '#cb19-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_text('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', text):'
          < span attributes={'id': 'cb19-2'} style={} >
            < a attributes={'href': '#cb19-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' text.isspace(): '
            < span attributes={'class': 'cf'} style={} >
              'return'
          < span attributes={'id': 'cb19-3'} style={} >
            < a attributes={'href': '#cb19-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'The parsed HTML tree now looks like this:'
    < pre attributes={'class': 'example'} style={} >
      < code attributes={} style={} >
        '<html lang="en-US" xml:lang="en-US">\n   <head>\n     <meta charset="utf-8" />\n       <meta name="generator" content="pandoc" />\n         <meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes" />\n           <meta name="author" content="Pavel Panchekha &amp; Chris Harrelson" />\n             <link rel="stylesheet" href="book.css" />\n               <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Vollkorn%7CLora&display=swap" />\n                 <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Vollkorn:400i%7CLora:400i&display=swap" />\n                   <title>'
    < p attributes={} style={} >
      'Why’s everything so deeply indented? Why aren’t these open elements\never closed?'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'In SGML, document type declarations had a URL to define the valid\ntags. Browsers use the absence of a document type declaration to '
        < a attributes={'href': 'https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode'} style={} >
          'identify'
        '\nvery old, pre-SGML versions of HTML,'
        < span attributes={'class': 'note-container'} style={} >
          < span attributes={'class': 'note'} style={} >
            'There’s also this crazy thing called “'
            < a attributes={'href': 'https://hsivonen.fi/doctype/'} style={} >
              'almost standards'
            '” or “limited\nquirks” mode, due to a backwards-incompatible change in table cell\nvertical layout. Yes. I don’t need to make these up!'
        ' but\ndon’t use the URL, so '
        < code attributes={} style={} >
          '<!doctype html>'
        ' is the best\ndocument type declaration for HTML.'
    < h1 attributes={'id': 'self-closing-tags'} style={} >
      'Self-closing tags'
    < p attributes={} style={} >
      'Elements like '
      < code attributes={} style={} >
        '<meta>'
      ' and '
      < code attributes={} style={} >
        '<link>'
      '\nare what are called self-closing: these tags don’t surround content, so\nyou don’t ever write '
      < code attributes={} style={} >
        '</meta>'
      ' or\n'
      < code attributes={} style={} >
        '</link>'
      '. Our parser needs special support for them.\nIn HTML, there’s a '
      < a attributes={'href': 'https://html.spec.whatwg.org/multipage/syntax.html#void-elements'} style={} >
        'specific\nlist'
      ' of these self-closing tags (the spec calls them “void”\ntags):'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'A lot of these\ntags are obscure. Browsers also support some additional, obsolete\nself-closing tags not listed here, like\n'
          < code attributes={} style={} >
            'keygen'
          '.'
    < div attributes={'class': 'sourceCode', 'id': 'cb21'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb21-1'} style={} >
            < a attributes={'href': '#cb21-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            'SELF_CLOSING_TAGS '
            < span attributes={'class': 'op'} style={} >
              '='
            ' ['
          < span attributes={'id': 'cb21-2'} style={} >
            < a attributes={'href': '#cb21-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'st'} style={} >
              '"area"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"base"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"br"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"col"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"embed"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"hr"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"img"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"input"'
            ','
          < span attributes={'id': 'cb21-3'} style={} >
            < a attributes={'href': '#cb21-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'st'} style={} >
              '"link"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"meta"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"param"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"source"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"track"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"wbr"'
            ','
          < span attributes={'id': 'cb21-4'} style={} >
            < a attributes={'href': '#cb21-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            ']'
    < p attributes={} style={} >
      'Our parser needs to auto-close tags from this list:'
    < div attributes={'class': 'sourceCode', 'id': 'cb22', 'data-indent': '4', 'data-expected': 'False'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb22-1'} style={} >
            < a attributes={'href': '#cb22-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb22-2'} style={} >
            < a attributes={'href': '#cb22-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb22-3'} style={} >
            < a attributes={'href': '#cb22-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' tag '
            < span attributes={'class': 'kw'} style={} >
              'in'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.SELF_CLOSING_TAGS:'
          < span attributes={'id': 'cb22-4'} style={} >
            < a attributes={'href': '#cb22-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parent '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished['
            < span attributes={'class': 'op'} style={} >
              '-'
            < span attributes={'class': 'dv'} style={} >
              '1'
            ']'
          < span attributes={'id': 'cb22-5'} style={} >
            < a attributes={'href': '#cb22-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        node '
            < span attributes={'class': 'op'} style={} >
              '='
            ' Element(tag, parent)'
          < span attributes={'id': 'cb22-6'} style={} >
            < a attributes={'href': '#cb22-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parent.children.append(node)'
    < p attributes={} style={} >
      'This code is right, but if you test it out it won’t seem to help. Why\nnot? Our parser is looking for a tag named '
      < code attributes={} style={} >
        'meta'
      ', but it’s\nfinding a tag named “'
      < code attributes={} style={} >
        'meta name=...'
      '”. The self-closing code\nisn’t triggered because the '
      < code attributes={} style={} >
        '<meta>'
      ' tag has\nattributes.'
    < p attributes={} style={} >
      'HTML attributes add information about an element; open tags can have\nany number of attributes. Attribute values can be quoted, unquoted, or\nomitted entirely. Let’s focus on basic attribute support, ignoring\nvalues that contain whitespace, which are a little complicated.'
    < p attributes={} style={} >
      'Since we’re not handling whitespace in values, we can split on\nwhitespace to get the tag name and the attribute-value pairs:'
    < div attributes={'class': 'sourceCode', 'id': 'cb23'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb23-1'} style={} >
            < a attributes={'href': '#cb23-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb23-2'} style={} >
            < a attributes={'href': '#cb23-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' get_attributes('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', text):'
          < span attributes={'id': 'cb23-3'} style={} >
            < a attributes={'href': '#cb23-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        parts '
            < span attributes={'class': 'op'} style={} >
              '='
            ' text.split()'
          < span attributes={'id': 'cb23-4'} style={} >
            < a attributes={'href': '#cb23-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        tag '
            < span attributes={'class': 'op'} style={} >
              '='
            ' parts['
            < span attributes={'class': 'dv'} style={} >
              '0'
            '].lower()'
          < span attributes={'id': 'cb23-5'} style={} >
            < a attributes={'href': '#cb23-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        attributes '
            < span attributes={'class': 'op'} style={} >
              '='
            ' {}'
          < span attributes={'id': 'cb23-6'} style={} >
            < a attributes={'href': '#cb23-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' attrpair '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' parts['
            < span attributes={'class': 'dv'} style={} >
              '1'
            ':]:'
          < span attributes={'id': 'cb23-7'} style={} >
            < a attributes={'href': '#cb23-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb23-8'} style={} >
            < a attributes={'href': '#cb23-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'return'
            ' tag, attributes'
    < p attributes={} style={} >
      'HTML tag names are case-insensitive,'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'This is '
          < a attributes={'href': 'https://www.b-list.org/weblog/2018/nov/26/case/'} style={} >
            'not the right\nway'
          ' to do case insensitive comparisons; the Unicode case folding\nalgorithm should be used if you want to handle languages other than\nEnglish. But in HTML specifically, tag names only use the ASCII\ncharacters so lower-casing them is sufficient.'
      ' as by the\nway are attribute values, so I convert them to lower case. Then, inside\nthe loop, I split each attribute-value pair into a name and a value. The\neasiest case is an unquoted attribute, where an equal sign separates the\ntwo:'
    < div attributes={'class': 'sourceCode', 'id': 'cb24', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb24-1'} style={} >
            < a attributes={'href': '#cb24-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' get_attributes('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', text):'
          < span attributes={'id': 'cb24-2'} style={} >
            < a attributes={'href': '#cb24-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb24-3'} style={} >
            < a attributes={'href': '#cb24-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' attrpair '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' parts['
            < span attributes={'class': 'dv'} style={} >
              '1'
            ':]:'
          < span attributes={'id': 'cb24-4'} style={} >
            < a attributes={'href': '#cb24-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'st'} style={} >
              '"="'
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' attrpair:'
          < span attributes={'id': 'cb24-5'} style={} >
            < a attributes={'href': '#cb24-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            key, value '
            < span attributes={'class': 'op'} style={} >
              '='
            ' attrpair.split('
            < span attributes={'class': 'st'} style={} >
              '"="'
            ', '
            < span attributes={'class': 'dv'} style={} >
              '1'
            ')'
          < span attributes={'id': 'cb24-6'} style={} >
            < a attributes={'href': '#cb24-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            attributes[key.lower()] '
            < span attributes={'class': 'op'} style={} >
              '='
            ' value'
          < span attributes={'id': 'cb24-7'} style={} >
            < a attributes={'href': '#cb24-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'The value can also be omitted, like in\n'
      < code attributes={} style={} >
        '<input disabled>'
      ', in which case the attribute value\ndefaults to the empty string:'
    < div attributes={'class': 'sourceCode', 'id': 'cb25', 'data-indent': '8'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb25-1'} style={} >
            < a attributes={'href': '#cb25-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' attrpair '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' parts['
            < span attributes={'class': 'dv'} style={} >
              '1'
            ':]:'
          < span attributes={'id': 'cb25-2'} style={} >
            < a attributes={'href': '#cb25-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb25-3'} style={} >
            < a attributes={'href': '#cb25-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb25-4'} style={} >
            < a attributes={'href': '#cb25-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        attributes[attrpair.lower()] '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '""'
    < p attributes={} style={} >
      'Finally, the value can be quoted, in which case the quotes have to be\nstripped out:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Quoted\nattributes allow whitespace between the quotes. That requires something\nlike a finite state machine instead of just splitting on\nwhitespace.'
    < div attributes={'class': 'sourceCode', 'id': 'cb26', 'data-indent': '12'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb26-1'} style={} >
            < a attributes={'href': '#cb26-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'st'} style={} >
              '"="'
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' attrpair:'
          < span attributes={'id': 'cb26-2'} style={} >
            < a attributes={'href': '#cb26-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb26-3'} style={} >
            < a attributes={'href': '#cb26-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'bu'} style={} >
              'len'
            '(value) '
            < span attributes={'class': 'op'} style={} >
              '>'
            < span attributes={'class': 'dv'} style={} >
              '2'
            < span attributes={'class': 'kw'} style={} >
              'and'
            ' value['
            < span attributes={'class': 'dv'} style={} >
              '0'
            '] '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' ['
            < span attributes={'class': 'st'} style={} >
              '"\'"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"'
            < span attributes={'class': 'ch'} style={} >
              '\\"'
            < span attributes={'class': 'st'} style={} >
              '"'
            ']:'
          < span attributes={'id': 'cb26-4'} style={} >
            < a attributes={'href': '#cb26-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        value '
            < span attributes={'class': 'op'} style={} >
              '='
            ' value['
            < span attributes={'class': 'dv'} style={} >
              '1'
            ':'
            < span attributes={'class': 'op'} style={} >
              '-'
            < span attributes={'class': 'dv'} style={} >
              '1'
            ']'
          < span attributes={'id': 'cb26-5'} style={} >
            < a attributes={'href': '#cb26-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'We’ll store these attributes inside '
      < code attributes={} style={} >
        'Element'
      's:'
    < div attributes={'class': 'sourceCode', 'id': 'cb27'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb27-1'} style={} >
            < a attributes={'href': '#cb27-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Element:'
          < span attributes={'id': 'cb27-2'} style={} >
            < a attributes={'href': '#cb27-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            < span attributes={'class': 'fu'} style={} >
              '__init__'
            '('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag, attributes, parent):'
          < span attributes={'id': 'cb27-3'} style={} >
            < a attributes={'href': '#cb27-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.tag '
            < span attributes={'class': 'op'} style={} >
              '='
            ' tag'
          < span attributes={'id': 'cb27-4'} style={} >
            < a attributes={'href': '#cb27-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.attributes '
            < span attributes={'class': 'op'} style={} >
              '='
            ' attributes'
          < span attributes={'id': 'cb27-5'} style={} >
            < a attributes={'href': '#cb27-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'That means we’ll need to call '
      < code attributes={} style={} >
        'get_attributes'
      ' at the top\nof '
      < code attributes={} style={} >
        'add_tag'
      ', to get the '
      < code attributes={} style={} >
        'attributes'
      ' we need to\nconstruct an '
      < code attributes={} style={} >
        'Element'
      '.'
    < div attributes={'class': 'sourceCode', 'id': 'cb28', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb28-1'} style={} >
            < a attributes={'href': '#cb28-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb28-2'} style={} >
            < a attributes={'href': '#cb28-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    tag, attributes '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.get_attributes(tag)'
    < p attributes={} style={} >
      'Remember to use '
      < code attributes={} style={} >
        'tag'
      ' and '
      < code attributes={} style={} >
        'attribute'
      ' instead\nof '
      < code attributes={} style={} >
        'text'
      ' in '
      < code attributes={} style={} >
        'add_tag'
      ', and try your parser\nagain:'
    < pre attributes={'class': 'example'} style={} >
      < code attributes={} style={} >
        '<html>\n   <head>\n     <meta>\n     <meta>\n     <meta>\n     <meta>\n     <link>\n     <link>\n     <link>\n     <title>'
    < p attributes={} style={} >
      'It’s close! Yes, if you print the attributes, you’ll see that\nattributes with whitespace (like '
      < code attributes={} style={} >
        'author'
      ' on the fourth\n'
      < code attributes={} style={} >
        'meta'
      ' tag) are mis-parsed as multiple attributes, and the\nfinal slash on the self-closing tags is incorrectly treated as an extra\nattribute. A better parser would fix these issues. But let’s instead\nleave our parser as is—these issues aren’t going to be a problem for the\ntoy browser we’re building—and move on to integrating it with our\nbrowser.'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'Putting a slash at the end of self-closing tags, like\n'
        < code attributes={} style={} >
          '<br/>'
        ', became fashionable when '
        < a attributes={'href': 'https://www.w3.org/TR/xhtml1/'} style={} >
          'XHTML'
        ' looked like it might\nreplace HTML, and old-timers like me never broke the habit. But unlike\nin '
        < a attributes={'href': 'https://www.w3.org/TR/xml/#sec-starttags'} style={} >
          'XML'
        ', in HTML\nself-closing tags are identified by name, not by some special syntax, so\nthe slash is optional.'
    < h1 attributes={'id': 'using-the-node-tree'} style={} >
      'Using the node tree'
    < p attributes={} style={} >
      'Right now, the '
      < code attributes={} style={} >
        'Layout'
      ' class works token-by-token; we now\nwant it to go node-by-node instead. So let’s separate the old\n'
      < code attributes={} style={} >
        'token'
      ' method into three parts: all the cases for open tags\nwill go into a new '
      < code attributes={} style={} >
        'open_tag'
      ' method; all the cases for close\ntags will go into a new '
      < code attributes={} style={} >
        'close_tag'
      ' method; and instead of\nhaving a case for text tokens our browser can just call the existing\n'
      < code attributes={} style={} >
        'text'
      ' method directly:'
    < div attributes={'class': 'sourceCode', 'id': 'cb30'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb30-1'} style={} >
            < a attributes={'href': '#cb30-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Layout:'
          < span attributes={'id': 'cb30-2'} style={} >
            < a attributes={'href': '#cb30-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' open_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb30-3'} style={} >
            < a attributes={'href': '#cb30-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"i"'
            ':'
          < span attributes={'id': 'cb30-4'} style={} >
            < a attributes={'href': '#cb30-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.style '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"italic"'
          < span attributes={'id': 'cb30-5'} style={} >
            < a attributes={'href': '#cb30-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb30-6'} style={} >
            < a attributes={'href': '#cb30-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
          < span attributes={'id': 'cb30-7'} style={} >
            < a attributes={'href': '#cb30-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' close_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb30-8'} style={} >
            < a attributes={'href': '#cb30-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' tag '
            < span attributes={'class': 'op'} style={} >
              '=='
            < span attributes={'class': 'st'} style={} >
              '"i"'
            ':'
          < span attributes={'id': 'cb30-9'} style={} >
            < a attributes={'href': '#cb30-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.style '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'st'} style={} >
              '"roman"'
          < span attributes={'id': 'cb30-10'} style={} >
            < a attributes={'href': '#cb30-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'Now we need the '
      < code attributes={} style={} >
        'Layout'
      ' object to walk the node tree,\ncalling '
      < code attributes={} style={} >
        'open_tag'
      ', '
      < code attributes={} style={} >
        'close_tag'
      ', and\n'
      < code attributes={} style={} >
        'text'
      ' in the right order:'
    < div attributes={'class': 'sourceCode', 'id': 'cb31', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb31-1'} style={} >
            < a attributes={'href': '#cb31-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' recurse('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tree):'
          < span attributes={'id': 'cb31-2'} style={} >
            < a attributes={'href': '#cb31-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            < span attributes={'class': 'bu'} style={} >
              'isinstance'
            '(tree, Text):'
          < span attributes={'id': 'cb31-3'} style={} >
            < a attributes={'href': '#cb31-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.text(tree)'
          < span attributes={'id': 'cb31-4'} style={} >
            < a attributes={'href': '#cb31-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb31-5'} style={} >
            < a attributes={'href': '#cb31-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.open_tag(tree.tag)'
          < span attributes={'id': 'cb31-6'} style={} >
            < a attributes={'href': '#cb31-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' child '
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' tree.children:'
          < span attributes={'id': 'cb31-7'} style={} >
            < a attributes={'href': '#cb31-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.recurse(child)'
          < span attributes={'id': 'cb31-8'} style={} >
            < a attributes={'href': '#cb31-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.close_tag(tree.tag)'
    < p attributes={} style={} >
      'The '
      < code attributes={} style={} >
        'Layout'
      ' constructor can now call '
      < code attributes={} style={} >
        'recurse'
      '\ninstead of looping through the list of tokens. We’ll also need the\nbrowser to construct the node tree, like this:'
    < div attributes={'class': 'sourceCode', 'id': 'cb32'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb32-1'} style={} >
            < a attributes={'href': '#cb32-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' Browser:'
          < span attributes={'id': 'cb32-2'} style={} >
            < a attributes={'href': '#cb32-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' load('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', url):'
          < span attributes={'id': 'cb32-3'} style={} >
            < a attributes={'href': '#cb32-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        headers, body '
            < span attributes={'class': 'op'} style={} >
              '='
            ' request(url)'
          < span attributes={'id': 'cb32-4'} style={} >
            < a attributes={'href': '#cb32-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.nodes '
            < span attributes={'class': 'op'} style={} >
              '='
            ' HTMLParser(body).parse()'
          < span attributes={'id': 'cb32-5'} style={} >
            < a attributes={'href': '#cb32-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.display_list '
            < span attributes={'class': 'op'} style={} >
              '='
            ' Layout('
            < span attributes={'class': 'va'} style={} >
              'self'
            '.nodes).display_list'
          < span attributes={'id': 'cb32-6'} style={} >
            < a attributes={'href': '#cb32-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.draw()'
    < p attributes={} style={} >
      'Run it—the browser should now work off of the parsed HTML tree.'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'Prior to the invention of CSS, some browsers supported web page\nstyling using attributes like '
        < code attributes={} style={} >
          'bgcolor'
        ' and\n'
        < code attributes={} style={} >
          'vlink'
        ' (the color of visited links) and tags like\n'
        < code attributes={} style={} >
          'font'
        '. These '
        < a attributes={'href': 'https://html.spec.whatwg.org/multipage/obsolete.html#obsolete'} style={} >
          'are\nobsolete'
        ', but browsers still support some of them.'
    < h1 attributes={'id': 'handling-author-errors'} style={} >
      'Handling author errors'
    < p attributes={} style={} >
      'The parser now handles HTML pages correctly—at least when the HTML is\nwritten by the sorts of goody-two-shoes programmers who remember the\n'
      < code attributes={} style={} >
        '<head>'
      ' tag, close every open tag, and make their bed\nin the morning. Mere mortals lack such discipline and so browsers also\nhave to handle broken, confusing, headless HTML. In fact, modern HTML\nparsers are capable of transforming '
      < em attributes={} style={} >
        'any'
      ' string of characters\ninto an HTML tree, no matter how confusing the markup.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Yes, it’s crazy, and for a few\nyears in the early ’00s the W3C tried to '
          < a attributes={'href': 'https://www.w3.org/TR/xhtml1/'} style={} >
            'do away with it'
          '. They\nfailed.'
    < p attributes={} style={} >
      'The full algorithm is, as you might expect, complicated beyond\nbelief, with dozens of ever-more-special cases forming a taxonomy of\nhuman error, but one of its nicer features is '
      < em attributes={} style={} >
        'implicit'
      ' tags.\nNormally, an HTML document starts with a familiar boilerplate:'
    < div attributes={'class': 'sourceCode', 'id': 'cb33'} style={} >
      < pre attributes={'class': 'sourceCod', 'html"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'html"': ''} style={} >
          < span attributes={'id': 'cb33-1'} style={} >
            < a attributes={'href': '#cb33-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'dt'} style={} >
              '<!doctype '
            'html'
            < span attributes={'class': 'dt'} style={} >
              '>'
          < span attributes={'id': 'cb33-2'} style={} >
            < a attributes={'href': '#cb33-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              '<html>'
          < span attributes={'id': 'cb33-3'} style={} >
            < a attributes={'href': '#cb33-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              '<head>'
          < span attributes={'id': 'cb33-4'} style={} >
            < a attributes={'href': '#cb33-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              '</head>'
          < span attributes={'id': 'cb33-5'} style={} >
            < a attributes={'href': '#cb33-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              '<body>'
          < span attributes={'id': 'cb33-6'} style={} >
            < a attributes={'href': '#cb33-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              '</body>'
          < span attributes={'id': 'cb33-7'} style={} >
            < a attributes={'href': '#cb33-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              '</html>'
    < p attributes={} style={} >
      'In reality, '
      < em attributes={} style={} >
        'all six'
      ' of these tags, except the doctype, are\noptional: browsers insert them automatically. Let’s add support for\nimplicit tags to our browser via a new '
      < code attributes={} style={} >
        'implicit_tags'
      '\nfunction that adds implicit tags when the web page omits them. We’ll\nwant to call it in both '
      < code attributes={} style={} >
        'add_text'
      ' and\n'
      < code attributes={} style={} >
        'add_tag'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb34', 'data-indent': '4'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb34-1'} style={} >
            < a attributes={'href': '#cb34-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb34-2'} style={} >
            < a attributes={'href': '#cb34-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_text('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', text):'
          < span attributes={'id': 'cb34-3'} style={} >
            < a attributes={'href': '#cb34-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' text.isspace(): '
            < span attributes={'class': 'cf'} style={} >
              'return'
          < span attributes={'id': 'cb34-4'} style={} >
            < a attributes={'href': '#cb34-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.implicit_tags('
            < span attributes={'class': 'va'} style={} >
              'None'
            ')'
          < span attributes={'id': 'cb34-5'} style={} >
            < a attributes={'href': '#cb34-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb34-6'} style={} >
            < a attributes={'href': '#cb34-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
          < span attributes={'id': 'cb34-7'} style={} >
            < a attributes={'href': '#cb34-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' add_tag('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb34-8'} style={} >
            < a attributes={'href': '#cb34-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '        tag, attributes '
            < span attributes={'class': 'op'} style={} >
              '='
            < span attributes={'class': 'va'} style={} >
              'self'
            '.get_attributes(tag)'
          < span attributes={'id': 'cb34-9'} style={} >
            < a attributes={'href': '#cb34-9', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' tag.startswith('
            < span attributes={'class': 'st'} style={} >
              '"!"'
            '): '
            < span attributes={'class': 'cf'} style={} >
              'return'
          < span attributes={'id': 'cb34-10'} style={} >
            < a attributes={'href': '#cb34-10', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.implicit_tags(tag)'
          < span attributes={'id': 'cb34-11'} style={} >
            < a attributes={'href': '#cb34-11', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      'Note that '
      < code attributes={} style={} >
        'implicit_tags'
      ' isn’t called for the ignored\nwhitespace and doctypes. The argument to '
      < code attributes={} style={} >
        'implicit_tags'
      ' is\nthe tag name (or '
      < code attributes={} style={} >
        'None'
      ' for text nodes), which we’ll compare\nto the list of unfinished tags to determine what’s been omitted:'
    < div attributes={'class': 'sourceCode', 'id': 'cb35'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb35-1'} style={} >
            < a attributes={'href': '#cb35-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb35-2'} style={} >
            < a attributes={'href': '#cb35-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'def'
            ' implicit_tags('
            < span attributes={'class': 'va'} style={} >
              'self'
            ', tag):'
          < span attributes={'id': 'cb35-3'} style={} >
            < a attributes={'href': '#cb35-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'while'
            < span attributes={'class': 'va'} style={} >
              'True'
            ':'
          < span attributes={'id': 'cb35-4'} style={} >
            < a attributes={'href': '#cb35-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '            open_tags '
            < span attributes={'class': 'op'} style={} >
              '='
            ' [node.tag '
            < span attributes={'class': 'cf'} style={} >
              'for'
            ' node '
            < span attributes={'class': 'kw'} style={} >
              'in'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.unfinished]'
          < span attributes={'id': 'cb35-5'} style={} >
            < a attributes={'href': '#cb35-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
    < p attributes={} style={} >
      < code attributes={} style={} >
        'implicit_tags'
      ' has a loop because more than one tag could\nhave been omitted in a row; every iteration around the loop will add\njust one. To determine which implicit tag to add, if any, requires\nexamining the open tags and the tag being inserted.'
    < p attributes={} style={} >
      'Let’s start with the easiest case, the implicit\n'
      < code attributes={} style={} >
        '<html>'
      ' tag. An implicit '
      < code attributes={} style={} >
        '<html>'
      ' tag\nis necessary if the first tag in the document is something other than\n'
      < code attributes={} style={} >
        '<html>'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb36', 'data-indent': '8'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb36-1'} style={} >
            < a attributes={'href': '#cb36-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'while'
            < span attributes={'class': 'va'} style={} >
              'True'
            ':'
          < span attributes={'id': 'cb36-2'} style={} >
            < a attributes={'href': '#cb36-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb36-3'} style={} >
            < a attributes={'href': '#cb36-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' open_tags '
            < span attributes={'class': 'op'} style={} >
              '=='
            ' [] '
            < span attributes={'class': 'kw'} style={} >
              'and'
            ' tag '
            < span attributes={'class': 'op'} style={} >
              '!='
            < span attributes={'class': 'st'} style={} >
              '"html"'
            ':'
          < span attributes={'id': 'cb36-4'} style={} >
            < a attributes={'href': '#cb36-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.add_tag('
            < span attributes={'class': 'st'} style={} >
              '"html"'
            ')'
    < p attributes={} style={} >
      'Both '
      < code attributes={} style={} >
        '<head>'
      ' and '
      < code attributes={} style={} >
        '<body>'
      ' can also\nbe omitted, but to figure out which it is we need to look at which tag\nis being added:'
    < div attributes={'class': 'sourceCode', 'id': 'cb37', 'data-indent': '8'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb37-1'} style={} >
            < a attributes={'href': '#cb37-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'while'
            < span attributes={'class': 'va'} style={} >
              'True'
            ':'
          < span attributes={'id': 'cb37-2'} style={} >
            < a attributes={'href': '#cb37-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb37-3'} style={} >
            < a attributes={'href': '#cb37-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' open_tags '
            < span attributes={'class': 'op'} style={} >
              '=='
            ' ['
            < span attributes={'class': 'st'} style={} >
              '"html"'
            '] '
            < span attributes={'class': 'op'} style={} >
              '\\'
          < span attributes={'id': 'cb37-4'} style={} >
            < a attributes={'href': '#cb37-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'and'
            ' tag '
            < span attributes={'class': 'kw'} style={} >
              'not'
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' ['
            < span attributes={'class': 'st'} style={} >
              '"head"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"body"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"/html"'
            ']:'
          < span attributes={'id': 'cb37-5'} style={} >
            < a attributes={'href': '#cb37-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'if'
            ' tag '
            < span attributes={'class': 'kw'} style={} >
              'in'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.HEAD_TAGS:'
          < span attributes={'id': 'cb37-6'} style={} >
            < a attributes={'href': '#cb37-6', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.add_tag('
            < span attributes={'class': 'st'} style={} >
              '"head"'
            ')'
          < span attributes={'id': 'cb37-7'} style={} >
            < a attributes={'href': '#cb37-7', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb37-8'} style={} >
            < a attributes={'href': '#cb37-8', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.add_tag('
            < span attributes={'class': 'st'} style={} >
              '"body"'
            ')'
    < p attributes={} style={} >
      'Here, '
      < code attributes={} style={} >
        'HEAD_TAGS'
      ' lists the tags that you’re supposed to\nput into the '
      < code attributes={} style={} >
        '<head>'
      ' element:'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'The\n'
          < code attributes={} style={} >
            '<script>'
          ' tag can go in either the head or the body\nsection, but it goes into the head by default.'
    < div attributes={'class': 'sourceCode', 'id': 'cb38'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb38-1'} style={} >
            < a attributes={'href': '#cb38-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'kw'} style={} >
              'class'
            ' HTMLParser:'
          < span attributes={'id': 'cb38-2'} style={} >
            < a attributes={'href': '#cb38-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    HEAD_TAGS '
            < span attributes={'class': 'op'} style={} >
              '='
            ' ['
          < span attributes={'id': 'cb38-3'} style={} >
            < a attributes={'href': '#cb38-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'st'} style={} >
              '"base"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"basefont"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"bgsound"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"noscript"'
            ','
          < span attributes={'id': 'cb38-4'} style={} >
            < a attributes={'href': '#cb38-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'st'} style={} >
              '"link"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"meta"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"title"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"style"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"script"'
            ','
          < span attributes={'id': 'cb38-5'} style={} >
            < a attributes={'href': '#cb38-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '    ]'
    < p attributes={} style={} >
      'Note that if both the '
      < code attributes={} style={} >
        '<html>'
      ' and\n'
      < code attributes={} style={} >
        '<head>'
      ' tags are omitted, '
      < code attributes={} style={} >
        'implicit_tags'
      '\nis going to insert both of them by going around the loop twice. In the\nfirst iteration '
      < code attributes={} style={} >
        'open_tags'
      ' is '
      < code attributes={} style={} >
        '[]'
      ', so the code\nadds an '
      < code attributes={} style={} >
        '<html>'
      ' tag; then, in the second iteration,\n'
      < code attributes={} style={} >
        'open_tags'
      ' is '
      < code attributes={} style={} >
        '["html"]'
      ' so it adds a\n'
      < code attributes={} style={} >
        '<head>'
      ' tag.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'These '
          < code attributes={} style={} >
            'add_tag'
          ' methods themselves call\n'
          < code attributes={} style={} >
            'implicit_tags'
          ', which means you can get into an infinite\nloop if you forget a case. Remember that every time you add a tag in\n'
          < code attributes={} style={} >
            'implicit_tags'
          ', that tag itself shouldn’t trigger more\nimplicit tags.'
    < p attributes={} style={} >
      'Finally, the '
      < code attributes={} style={} >
        '</head>'
      ' tag can also be implicit, if\nthe parser is inside the '
      < code attributes={} style={} >
        '<head>'
      ' and sees an element\nthat’s supposed to go in the '
      < code attributes={} style={} >
        '<body>'
      ':'
    < div attributes={'class': 'sourceCode', 'id': 'cb39', 'data-indent': '8'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb39-1'} style={} >
            < a attributes={'href': '#cb39-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'while'
            < span attributes={'class': 'va'} style={} >
              'True'
            ':'
          < span attributes={'id': 'cb39-2'} style={} >
            < a attributes={'href': '#cb39-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb39-3'} style={} >
            < a attributes={'href': '#cb39-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'elif'
            ' open_tags '
            < span attributes={'class': 'op'} style={} >
              '=='
            ' ['
            < span attributes={'class': 'st'} style={} >
              '"html"'
            ', '
            < span attributes={'class': 'st'} style={} >
              '"head"'
            '] '
            < span attributes={'class': 'kw'} style={} >
              'and'
            < span attributes={'class': 'op'} style={} >
              '\\'
          < span attributes={'id': 'cb39-4'} style={} >
            < a attributes={'href': '#cb39-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            '         tag '
            < span attributes={'class': 'kw'} style={} >
              'not'
            < span attributes={'class': 'kw'} style={} >
              'in'
            ' ['
            < span attributes={'class': 'st'} style={} >
              '"/head"'
            '] '
            < span attributes={'class': 'op'} style={} >
              '+'
            < span attributes={'class': 'va'} style={} >
              'self'
            '.HEAD_TAGS:'
          < span attributes={'id': 'cb39-5'} style={} >
            < a attributes={'href': '#cb39-5', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'va'} style={} >
              'self'
            '.add_tag('
            < span attributes={'class': 'st'} style={} >
              '"/head"'
            ')'
    < p attributes={} style={} >
      'Technically, the '
      < code attributes={} style={} >
        '</body>'
      ' and\n'
      < code attributes={} style={} >
        '</html>'
      ' tags can also be implicit. But since our\n'
      < code attributes={} style={} >
        'finish'
      ' function already closes any unfinished tags, that\ndoesn’t need any extra code. So all that’s left for\n'
      < code attributes={} style={} >
        'implicit_tags'
      ' tags is to exit out of the loop:'
    < div attributes={'class': 'sourceCode', 'id': 'cb40', 'data-indent': '8'} style={} >
      < pre attributes={'class': 'sourceCod', 'python"': ''} style={} >
        < code attributes={'class': 'sourceCod', 'python"': ''} style={} >
          < span attributes={'id': 'cb40-1'} style={} >
            < a attributes={'href': '#cb40-1', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'while'
            < span attributes={'class': 'va'} style={} >
              'True'
            ':'
          < span attributes={'id': 'cb40-2'} style={} >
            < a attributes={'href': '#cb40-2', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'co'} style={} >
              '# ...'
          < span attributes={'id': 'cb40-3'} style={} >
            < a attributes={'href': '#cb40-3', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'else'
            ':'
          < span attributes={'id': 'cb40-4'} style={} >
            < a attributes={'href': '#cb40-4', 'aria-hidden': 'true', 'tabindex': '-1'} style={} >
            < span attributes={'class': 'cf'} style={} >
              'break'
    < p attributes={} style={} >
      'Of course, there are more rules for handling malformed HTML:\nformatting tags, nested paragraphs, embedded SVG and MathML, and all\nsorts of other complexity. Each has complicated rules abounding with\nedge cases. But let’s end our discussion of handling author errors\nhere.'
    < p attributes={} style={} >
      'The rules for malformed HTML may seem arbitrary, and they are: they\nevolved over years of trying to guess what people “meant” when they\nwrote that HTML, and are now codified in the '
      < a attributes={'href': 'https://html.spec.whatwg.org/multipage/parsing.html'} style={} >
        'HTML parsing\nstandard'
      '. Of course, sometimes these rules “guess” wrong—but as so\noften happens on the web, it’s often more important that every browser\ndoes the '
      < em attributes={} style={} >
        'same'
      ' thing, rather than each trying to guess what the\n'
      < em attributes={} style={} >
        'right'
      ' thing is.'
    < div attributes={'class': 'further'} style={} >
      < p attributes={} style={} >
        'Thanks to implicit tags, you can mostly skip the\n'
        < code attributes={} style={} >
          '<html>'
        ', '
        < code attributes={} style={} >
          '<body>'
        ', and\n'
        < code attributes={} style={} >
          '<head>'
        ' elements, and they’ll be implicitly added back\nfor you. Nor does writing them explicitly let you do anything weird; the\nHTML parser’s '
        < a attributes={'href': 'https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-afterbody'} style={} >
          'many\nstates'
        ' guarantee that there’s only one '
        < code attributes={} style={} >
          '<head>'
        ' and\none '
        < code attributes={} style={} >
          '<body>'
        '.'
        < span attributes={'class': 'note-container'} style={} >
          < span attributes={'class': 'note'} style={} >
            'At least, per document. An HTML file that uses frames or\ntemplates can have more than one '
            < code attributes={} style={} >
              '<head>'
            ' and\n'
            < code attributes={} style={} >
              '<body>'
            ', but they correspond to different\ndocuments.'
    < h1 attributes={'id': 'summary'} style={} >
      'Summary'
    < p attributes={} style={} >
      'This chapter taught our browser that HTML is a tree, not just a flat\nlist of tokens. We added:'
    < ul attributes={} style={} >
      < li attributes={} style={} >
        'A parser to transform HTML tokens to a tree'
      < li attributes={} style={} >
        'Code to recognize and handle attributes on elements'
      < li attributes={} style={} >
        'Automatic fixes for some malformed HTML documents'
      < li attributes={} style={} >
        'A recursive layout algorithm to lay out an HTML tree'
    < p attributes={} style={} >
      'The tree structure of HTML is essential to display visually complex\nweb pages, as we will see in the '
      < a attributes={'href': 'layout.html'} style={} >
        'next\nchapter'
      '.'
    < div attributes={'id': 'signup'} style={} >
      < iframe attributes={'src': 'https://browserbook.substack.com/embed', 'width': '350', 'height': '180', 'frameborder': '0', 'scrolling': 'no'} style={} >
      < a attributes={'href': '#', 'id': 'signup-close'} style={} >
        'Close'
    < h1 attributes={'id': 'outline'} style={} >
      'Outline'
    < p attributes={} style={} >
      'The complete set of functions, classes, and methods in our browser\nshould look something like this:'
    < div attributes={'class': 'cm', 'python': '', 'outline"': ''} style={} >
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'def'
        ' request(url)\n'
      < code attributes={'class': 'line'} style={} >
        'WIDTH\n'
      < code attributes={'class': 'line'} style={} >
        'HEIGHT\n'
      < code attributes={'class': 'line'} style={} >
        'HSTEP\n'
      < code attributes={'class': 'line'} style={} >
        'VSTEP\n'
      < code attributes={'class': 'line'} style={} >
        'SCROLL_STEP\n'
      < code attributes={'class': 'line'} style={} >
        'FONTS\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'def'
        ' get_font(size, weight, slant)\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' Text:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__(text, parent)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __repr__()\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' Element:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__(tag, attributes, parent)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __repr__()\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'def'
        ' print_tree(node, indent)\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' HTMLParser:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__(body)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' parse()\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' get_attributes(text)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' add_text(text)\n'
        < code attributes={'class': 'line'} style={} >
          '    SELF_CLOSING_TAGS\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' add_tag(tag)\n'
        < code attributes={'class': 'line'} style={} >
          '    HEAD_TAGS\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' implicit_tags(tag)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' finish()\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' Layout:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__(tree)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' recurse(tree)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' open_tag(tag)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' close_tag(tag)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' text(node)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' flush()\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'kw'} style={} >
          'class'
        ' Browser:\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' __init__()\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' load(url)\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' draw()\n'
        < code attributes={'class': 'line'} style={} >
          < span attributes={'class': 'kw'} style={} >
            'def'
          ' scrolldown(e)\n'
      < code attributes={'class': 'line'} style={} >
        < span attributes={'class': 'cf'} style={} >
          'if'
        ' __name__ '
        < span attributes={'class': 'op'} style={} >
          '=='
        < span attributes={'class': 'st'} style={} >
          '"__main__"'
    < h1 attributes={'id': 'exercises'} style={} >
      'Exercises'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Comments:'
      ' Update the HTML lexer to support comments.\nComments in HTML begin with '
      < code attributes={} style={} >
        '<!--'
      ' and end with\n'
      < code attributes={} style={} >
        '-->'
      '. However, comments aren’t the same as tags: they can\ncontain any text, including left and right angle brackets. The lexer\nshould skip comments, not generating any token at all. Check: is\n'
      < code attributes={} style={} >
        '<!-->'
      ' a comment, or does it just start one?'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Paragraphs:'
      ' It’s not clear what it would mean for one\nparagraph to contain another. Change the parser so that a document like\n'
      < code attributes={} style={} >
        '<p>hello<p>world</p>'
      ' results in two\nsibling paragraphs instead of one paragraph inside another; real\nbrowsers do this too.'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Scripts:'
      ' JavaScript code embedded in a\n'
      < code attributes={} style={} >
        '<script>'
      ' tag uses the left angle bracket to mean\nless-than. Modify your lexer so that the contents of\n'
      < code attributes={} style={} >
        '<script>'
      ' tags are treated specially: no tags are\nallowed inside '
      < code attributes={} style={} >
        '<script>'
      ', except the\n'
      < code attributes={} style={} >
        '</script>'
      ' close tag.'
      < span attributes={'class': 'note-container'} style={} >
        < span attributes={'class': 'note'} style={} >
          'Technically it’s just\n'
          < code attributes={} style={} >
            '</script'
          ' followed by a '
          < a attributes={'href': 'https://html.spec.whatwg.org/multipage/parsing.html#script-data-end-tag-name-state'} style={} >
            'space,\ntab, '
            < code attributes={} style={} >
              '\\v'
            ', '
            < code attributes={} style={} >
              '\\r'
            ', slash, or greater than sign'
          '.\nIf you need to talk about '
          < code attributes={} style={} >
            '</script>'
          ' tags inside\nJavaScript code, you have to split it into multiple\nstrings.'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Quoted attributes:'
      ' Quoted attributes can contain spaces and\nright angle brackets. Fix the lexer so that this is supported properly.\nHint: the current lexer is a finite state machine, with two states\n(determined by '
      < code attributes={} style={} >
        'in_tag'
      '). You’ll need more states.'
    < p attributes={} style={} >
      < em attributes={} style={} >
        'Syntax Highlighting:'
      ' Implement the '
      < code attributes={} style={} >
        'view-source:'
      '\nprotocol as in '
      < a attributes={'href': 'http.html#exercises'} style={} >
        'Chapter 1'
      ', but make it\nsyntax-highlight the source code of HTML pages. Keep source code for\nHTML tags in a normal font, but make text contents bold. If you’ve\nimplemented it, wrap text in '
      < code attributes={} style={} >
        '<pre>'
      ' tags as well to\npreserve line breaks. Hint: subclass the HTML parser and use it to\nimplement your syntax highlighter.'
    < nav attributes={'class': 'links'} style={} >
      '\n  Chapter 4 of '
      < a attributes={'href': 'index.html', 'title': 'Tabl', 'of': '', 'contents"': ''} style={} >
        'Web Browser Engineering'
      '.\n  '
      < a attributes={'rel': 'prev', 'title': 'Previou', 'chapter"': '', 'href': 'text.html'} style={} >
        '<'
      < a attributes={'rel': 'next', 'title': 'Nex', 'chapter"': '', 'href': 'layout.html'} style={} >
        '>'
    < p attributes={} style={} >
      'Did you find this chapter useful? '
      < button attributes={'id': 'feedback-button'} style={} >
        'Send us feedback!'
    < footer attributes={} style={} >
      '\n  © 2018–2023 '
      < a attributes={'href': 'https://pavpanchekha.com'} style={} >
        'Pavel Panchekha'
      ' & '
      < a attributes={'href': 'https://twitter.com/chrishtr'} style={} >
        'Chris Harrelson'
    < script attributes={'type': 'text/javascript', 'src': 'feedback.js'} style={} >
    < script attributes={'type': 'text/javascript', 'src': 'book.js'} style={} >

